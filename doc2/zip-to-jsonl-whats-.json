{
  "createdAt": "2025-07-10T20:51:50.828Z",
  "updatedAt": "2025-07-17T17:01:49.732Z",
  "id": "2GUWbA9vo8uoHomd",
  "name": "zip to JSONL whats",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cohere.com/v1/embed",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"embed-english-v3.0\",\n  \"input_type\": \"search_document\",\n  \"texts\": [\n    \"{{ $('Code4').item.json.textContent.replace(/\\n/g, '\\\\n') }}\"\n  ]\n} ",
        "options": {}
      },
      "id": "7dca71b8-c88e-4e29-a629-8cb150848479",
      "name": "Gerar_Embedding_Cohere",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1140,
        1000
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "OyCraanHEQ1O0xVC",
          "name": "cohere"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO documents (title, content, embedding)\nVALUES ($1, $2, $3::vector)\nRETURNING id, content;\n",
        "options": {
          "queryReplacement": "={{$('Edit Fields4').item.json[\"title\"]}}, {{$json[\"texts\"]}}, {{ $json[\"embeddings\"] ? '[' + $json[\"embeddings\"].join(\",\") + ']' : '[]' }}\n"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1580,
        1000
      ],
      "id": "534f9a4b-9cd2-4596-b3ad-6b5cf3fcc377",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "z2oHR8Hcbud4cXb6",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1140,
        1200
      ],
      "id": "dac3b70b-a58a-4f56-b190-ecc5025221bc",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "fileSelector": "={{ $json.fileName }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        40,
        1100
      ],
      "id": "7f04592f-75ac-452a-b213-d382acc8fe9e",
      "name": "Read/Write Files from Disk4"
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        260,
        1100
      ],
      "id": "e2b9383f-9ca2-4c60-899d-e0197b443f8f",
      "name": "Extract from File2"
    },
    {
      "parameters": {
        "jsCode": "// Função para criar chunks de mensagens para RAG (remetente: mensagem + metadados)\nfunction createMessageChunks(input) {\n\ttry {\n\t\tconst rawData = input[0].data;\n\t\tconst messageLines = rawData.trim().split('\\n');\n\n\t\tconst messages = messageLines.map(line => {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(line);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Erro ao parsear linha:', line);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).filter(msg => msg !== null);\n\n\t\tconst chunkSize = 5;\n\t\tconst stepSize = 3;\n\t\tconst chunks = [];\n\n\t\tfor (let i = 0; i < messages.length; i += stepSize) {\n\t\t\tconst chunk = messages.slice(i, i + chunkSize);\n\n\t\t\tif (chunk.length > 0) {\n\t\t\t\tconst textContent = chunk.map(msg =>\n\t\t\t\t\t`${msg.remetente}: ${msg.mensagem}`\n\t\t\t\t).join('\\n');\n\n\t\t\t\tchunks.push({\n\t\t\t\t\tchunkId: Math.floor(i / stepSize),\n\t\t\t\t\tstartIndex: i,\n\t\t\t\t\tendIndex: Math.min(i + chunkSize - 1, messages.length - 1),\n\t\t\t\t\tmessageCount: chunk.length,\n\t\t\t\t\ttextContent: textContent,\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tdateRange: {\n\t\t\t\t\t\t\tstart: chunk[0].data,\n\t\t\t\t\t\t\tend: chunk[chunk.length - 1].data\n\t\t\t\t\t\t},\n\t\t\t\t\t\tparticipants: [...new Set(chunk.map(msg => msg.remetente))],\n\t\t\t\t\t\ttotalMessages: chunk.length\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn chunks;\n\n\t} catch (error) {\n\t\tconsole.error('Erro ao processar chunks:', error);\n\t\treturn [{ error: 'Erro ao processar os dados', details: error.message }];\n\t}\n}\n\n// Entrada no n8n\nconst input = [\n\t{\n\t\tdata: $json.data\n\t}\n];\n\n// Processa os chunks\nconst chunks = createMessageChunks(input);\n\n// Retorna uma lista de chunks como itens\nreturn chunks.map(chunk => ({ json: chunk }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        1100
      ],
      "id": "343f501a-5e99-4204-a3d9-14877f56641f",
      "name": "Code4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "23a613dd-27ef-44ca-a148-f76fa059e8b1",
              "leftValue": "={{ $json.metadata.totalMessages }}",
              "rightValue": 2,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        920,
        1100
      ],
      "id": "bec794d8-8365-4f7e-a5af-22bf6e830c0d",
      "name": "If2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "873643d3-25b5-407e-b20e-664e4ea299ea",
              "name": "title",
              "value": "Atendimento WhatsApp Guardião Lajes",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1360,
        1000
      ],
      "id": "685d264b-68c0-4135-b662-80ea0948b42e",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "jsCode": "const normalizeText = (text) => {\n  return text\n    .split('\\n') // separa cada linha de fala\n    .map(line => {\n      const parts = line.split(':');\n      if (parts.length >= 2) {\n        const speaker = parts[0]\n          .toLowerCase()\n          .normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\n          .trim();\n\n        const message = parts.slice(1).join(':')\n          .toLowerCase()\n          .normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\n          .replace(/[^\\w\\s]/g, \"\") // remove pontuação da mensagem\n          .replace(/\\s+/g, \" \")\n          .trim();\n\n        return `${speaker}: ${message}`;\n      } else {\n        // caso seja uma linha sem \":\", apenas normaliza\n        return line\n          .toLowerCase()\n          .normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\n          .replace(/[^\\w\\s]/g, \"\")\n          .replace(/\\s+/g, \" \")\n          .trim();\n      }\n    })\n    .join('\\n');\n};\n\nreturn items.map(item => {\n  const normalized = normalizeText(item.json.textContent);\n\n  return {\n    json: {\n      ...item.json,\n      textContent_normalized: normalized\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        700,
        1100
      ],
      "id": "e5bb67f4-4b8f-4caa-907c-18667052bdc4",
      "name": "Code5"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        120,
        620
      ],
      "id": "aee99990-7462-4f85-a27f-23b5565174a9",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "command": "=unzip -o \"{{ $('Loop Over Items').item.json.path }}\" -d \"/mnt/externo/whatsapp_exports/extracted/n{{ $('numero').item.json.numero }}\"\n"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1880,
        280
      ],
      "id": "31c7887f-e3c8-4ac6-ae3a-a54fe32b6dc6",
      "name": "Extrair zip"
    },
    {
      "parameters": {
        "command": "ls /mnt/externo/whatsapp_exports/*.zip"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        340,
        620
      ],
      "id": "ff0825f4-303c-4c99-a83e-33d57959f93c",
      "name": "list .zip"
    },
    {
      "parameters": {
        "command": "=find /mnt/externo/whatsapp_exports/extracted/ -maxdepth 1 -mindepth 1 -type d"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1220,
        380
      ],
      "id": "071e059c-1940-4dfe-a533-f4b618d8f3c6",
      "name": "list past extraidos"
    },
    {
      "parameters": {
        "jsCode": "// Recebe stdout do Execute Command e transforma em array de caminhos\nconst paths = $json.stdout.trim().split('\\n');\nreturn paths.map(path => ({ json: { path } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        620
      ],
      "id": "2804cb74-2e91-4348-8851-44fac04aefbc",
      "name": "Code1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        780,
        620
      ],
      "id": "c2fd4c34-c0ec-4ee9-82fc-1f951597313a",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        5140,
        -280
      ],
      "id": "82116a23-04c7-4bae-8c9e-fa41f7b4b4df"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4c50ea02-80b5-4a1f-a752-54a4d7a120d0",
              "leftValue": "={{ $json.stdout }}",
              "rightValue": "={{ $('numero').item.json.numero }}",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1440,
        380
      ],
      "id": "315c7f81-2d35-4445-b412-ac57356dd2b4",
      "name": "If"
    },
    {
      "parameters": {
        "fileSelector": "=/mnt/externo/whatsapp_exports/extracted/n{{ $('numero').item.json.numero.trim() }}/Conversa do WhatsApp com {{ ($('numero').item.json.numero.replace(/[^0-9]/g, '').match(/^\\d+$/)) ? '+55 ' + $('numero').item.json.numero.trim() : $('numero').item.json.numero.trim() }}.txt",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        2100,
        340
      ],
      "id": "7d50ccfd-98f8-45d4-bf5e-ae77c679f746",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        2320,
        340
      ],
      "id": "d0a2e4d0-5bf0-46b3-aa0c-4870ff7fa0a1",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "const text = $input.first().json.data;\nconst lines = text.split('\\n');\nlet i = 0;\n\nconst result = [];\nlet lastMessage = null;\n\nfor (const line of lines) {\n    const match = line.match(/^(\\d{2}\\/\\d{2}\\/\\d{4}) (\\d{2}:\\d{2}) - (.*?): (.*)$/);\n    if (match) {\n        const [_, data, hora, remetente1, mensagem] = match;\n        let tipo = \"texto\";\n        let arquivo = null;\n        let mensagem_final = mensagem;\n\n        // Determina se é vendedor ou cliente\n        let remetente = (remetente1.trim() === \"Guardião Lajes\") ? \"vendedor\" : \"cliente\";\n\n        if (mensagem.includes('(arquivo anexado)')) {\n            const fileMatch = mensagem.match(/([\\w\\s\\-\\.\\(\\)]+\\.(opus|mp3|pdf|jpg|jpeg|png))/i);\n            if (fileMatch) {\n                arquivo = fileMatch[1].trim();\n                if (arquivo.match(/\\.(opus|mp3)$/i)) {\n                    tipo = 'audio';\n                    mensagem_final = `#ANEXO_AUDIO:${arquivo}`;\n                } else if (arquivo.endsWith('.pdf')) {\n                    tipo = 'pdf';\n                    mensagem_final = `#ANEXO_PDF:${arquivo}`;\n                } else if (arquivo.match(/\\.(jpg|jpeg|png)$/i)) {\n                    tipo = 'imagem';\n                    mensagem_final = `#ANEXO_IMAGEM:${arquivo}`;\n                } else {\n                    tipo = 'arquivo';\n                    mensagem_final = `#ANEXO:${arquivo}`;\n                }\n            } else {\n                tipo = 'arquivo';\n                mensagem_final = `#ANEXO_INDEFINIDO`;\n            }\n        }\n\n        lastMessage = {\n            data,\n            hora,\n            remetente,   // campo adicional\n            mensagem: mensagem_final,\n            tipo,\n            arquivo,\n            index: i\n        };\n        i++;\n          \n\n        result.push({ json: lastMessage });\n    } else if (lastMessage && line.trim() !== '') {\n        // Adiciona linhas quebradas como continuação da última mensagem\n        lastMessage.mensagem += ' ' + line.trim();\n    }\n}\n\nreturn result;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2760,
        340
      ],
      "id": "e76924dc-d4c7-4798-b382-792884841868",
      "name": "Code"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "=imagem",
                    "rightValue": "={{ $json.tipo }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "ae50a909-cdd7-40ab-9c8b-aee03b41d426"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "IMAGEM"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "485667e0-d5ec-4825-adb9-992f0c5c096c",
                    "leftValue": "pdf",
                    "rightValue": "={{ $json.tipo }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PDF"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e7af592e-d78d-4b72-8019-82c38e002938",
                    "leftValue": "audio",
                    "rightValue": "={{ $json.tipo }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "AUDIO"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "045b4889-6dc7-4861-b5ae-07b9710d4467",
                    "leftValue": "texto",
                    "rightValue": "={{ $json.tipo }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TEXTO"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "63807e63-56dc-4472-b8df-3c079f8c1c0e",
                    "leftValue": "arquivo",
                    "rightValue": "={{ $json.tipo }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "INDEFINIDO"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        3640,
        400
      ],
      "id": "1ad31a36-5466-4ff8-af65-c8ae16264556",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5918ae19-e7fd-4a5e-83ae-2911545a83d3",
              "name": "mensagem",
              "value": "={{ $json.mensagem }}",
              "type": "string"
            },
            {
              "id": "f6bed8be-bb1b-4db0-a504-4d1b0c5116a7",
              "name": "index",
              "value": "={{ $('Switch').item.json.index }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4880,
        820
      ],
      "id": "fc2fc7ae-51c6-4a2d-a3cf-c6b68a6b70f1",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/audio/transcriptions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "whisper-large-v3-turbo"
            },
            {
              "name": "temperature",
              "value": "0"
            },
            {
              "name": "response_format",
              "value": "verbose_json"
            },
            {
              "name": "language",
              "value": "pt"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4300,
        640
      ],
      "id": "256d647d-9548-4574-b838-27669f487b7f",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "KW0uLEkG9HB7moO8",
          "name": "grok"
        }
      }
    },
    {
      "parameters": {
        "fileSelector": "=/mnt/externo/whatsapp_exports/extracted/n{{ $('numero').item.json.numero.trim() }}/{{ $json.arquivo }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        4100,
        640
      ],
      "id": "0de57298-4497-4a53-b8f2-59743964f6fb",
      "name": "Read/Write Files from Disk1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52dd6b8c-deaa-4371-8a34-581a02a64363",
              "name": "mensagem",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "68ace24c-7442-45e2-9647-d46f6533b99a",
              "name": "index",
              "value": "={{ $('Switch').item.json.index }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4880,
        640
      ],
      "id": "18b0c13c-2ba8-41b7-943f-a48d76f82ee1",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "fileSelector": "=/mnt/externo/whatsapp_exports/extracted/n{{ $('numero').item.json.numero.trim() }}/{{ $json.arquivo }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        4100,
        440
      ],
      "id": "7923d325-b32d-40b2-92bc-93a38cd34120",
      "name": "Read/Write Files from Disk2"
    },
    {
      "parameters": {
        "fileSelector": "=/mnt/externo/whatsapp_exports/extracted/n{{ $('numero').item.json.numero.trim() }}/{{ $json.arquivo }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        4080,
        140
      ],
      "id": "99dd36c7-7d93-4d0b-b540-9f01f57908c9",
      "name": "Read/Write Files from Disk3"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        4300,
        440
      ],
      "id": "0d5c9f8a-7099-44ee-9524-494558c46ad7",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "jsCode": "const text = $input.first().json.text || \"\";\n\nlet tipo_pdf = \"documento_generico\";\n\n// Verifica padrões\nif (text.match(/pix|comprovante|transfer[êe]ncia|banco/i)) {\n    tipo_pdf = \"comprovante_pagamento\";\n} else if (text.match(/orcamento|orçamento|val[oa]r total|pedido/i)) {\n    tipo_pdf = \"orcamento\";\n} else if (text.match(/nota fiscal|nf-e|chave de acesso/i)) {\n    tipo_pdf = \"nota_fiscal\";\n}\n\n// Retorna o tipo para roteamento\nreturn [\n    {\n        json: {\n            tipo_pdf,\n            texto_pdf: text // se quiser passar para o próximo passo\n        }\n    }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4580,
        440
      ],
      "id": "f013fc8b-20b4-4fbb-885e-03725cddb730",
      "name": "Code2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52dd6b8c-deaa-4371-8a34-581a02a64363",
              "name": "mensagem",
              "value": "={{ $json.tipo_pdf }}\n{{ $json.texto_pdf }}",
              "type": "string"
            },
            {
              "id": "e22c7deb-05a3-4f45-9179-1f35118a5f80",
              "name": "index",
              "value": "={{ $('Switch').item.json.index }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4880,
        440
      ],
      "id": "d65484a5-f11e-4adc-91a3-d8bca0522b7a",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-tesseractjs.tesseractNode",
      "typeVersion": 1,
      "position": [
        4300,
        140
      ],
      "id": "25890156-b18f-449a-8cec-cfc1cb78022a",
      "name": "Tesseract"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "343af6c9-4d48-43ce-b7fe-9e68033c4a06",
              "name": "mensagem",
              "value": "={{ $json.output.descricao_imagem }}",
              "type": "string"
            },
            {
              "id": "e607f7b1-508c-4aa7-a606-6955effcbe63",
              "name": "index",
              "value": "={{ $('Switch').item.json.index }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4880,
        140
      ],
      "id": "4d8c6105-c079-49ed-9294-b68bc9cc712d",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "text": "={{ $json.text }}",
        "attributes": {
          "attributes": [
            {
              "name": "descricao_imagem",
              "description": "“Você é especialista em descrição de imagens para RAG. Receberá texto OCR extraído de imagens de WhatsApp ou documentos. Gere uma descrição curta e objetiva, cobrindo apenas:  O que há na imagem (ex: nota fiscal, tabela de preços, conversa).  Principais textos ou frases legíveis.  Layout geral (ex: tabela, parágrafos, colunas).  Evite detalhes desnecessários."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [
        4520,
        40
      ],
      "id": "fcafd7a2-cb93-4860-b125-03afa84544e6",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        4600,
        260
      ],
      "id": "be69b5a6-89d0-47ab-8693-3d8d9b17c3ae",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "GOTIgGndJIkf9Pqy",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "index"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        4120,
        -280
      ],
      "id": "a090635b-e31f-4d95-afee-bb51834ec89d",
      "name": "Sort"
    },
    {
      "parameters": {
        "fileName": "=/mnt/externo/whatsapp_exports/extracted/n{{ $('Code3').item.json.numero }}/{{ $('Code3').item.json.numero }}.jsonl",
        "options": {}
      },
      "id": "b8122b76-fe5c-4d62-b49f-50e6b4a98bdc",
      "name": "Save JSONL File",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        4920,
        -280
      ]
    },
    {
      "parameters": {
        "jsCode": "const jsonlLines = items.map(item => JSON.stringify(item.json));\nconst jsonlContent = jsonlLines.join('\\n');\nconst numero = $('numero').first().json.numero;\n\nreturn [{\n  json: {\n    data: jsonlContent,\n    fileName: `whatsapp_export_${Date.now()}`,\n    fileExtension: 'jsonl',\n  numero: numero\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4340,
        -280
      ],
      "id": "56fec4a3-0c27-4769-a861-565707e63eee",
      "name": "Code3"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "data",
        "options": {
          "encoding": "utf8"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        4640,
        -280
      ],
      "id": "d3a990b0-869d-4eca-a151-010720feb221",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cb4863d5-dc62-4248-aeec-6be351113c55",
              "name": "numero",
              "value": "={{ $('Loop Over Items').item.json.path.split('/').pop().replace('.zip', '').match(/(\\d{2} \\d{4}-\\d{4})/)?.[0] || $('Loop Over Items').item.json.path.split('/').pop().match(/com (.*?)\\.zip/)?.[1] || '' }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1000,
        380
      ],
      "id": "4d960492-87fa-4a51-801b-6d4ab23d86ae",
      "name": "numero"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c1920424-aedc-4364-a708-dfdc88f17cc2",
              "leftValue": "={{ $json.stdout }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1880,
        480
      ],
      "id": "098b4c11-5114-451d-80ac-6a3825f9a391",
      "name": "If1"
    },
    {
      "parameters": {
        "command": "=find \"/mnt/externo/whatsapp_exports/extracted/n{{ $('numero').item.json.numero }}\" -name \"{{ $('numero').item.json.numero }}.jsonl\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1660,
        480
      ],
      "id": "5776c9d8-a876-4e21-b4e6-454d3be0c2cf",
      "name": "Execute Command"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me1",
      "typeVersion": 1,
      "position": [
        2100,
        720
      ],
      "id": "ec89e5c5-1370-46bd-b736-94ede9c89a7e"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3420,
        540
      ],
      "id": "c1bd99ed-c3fd-4fd5-81d1-f1ceebce8f8b",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me2",
      "typeVersion": 1,
      "position": [
        5300,
        920
      ],
      "id": "dc5a7dd6-e8a0-44ee-bda5-58319fc3509f"
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "index",
              "field2": "index"
            }
          ]
        },
        "options": {}
      },
      "id": "d5d5b0a0-d92b-4df6-a8de-361ce1c84024",
      "name": "Merge By Index",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        3900,
        -280
      ]
    },
    {
      "parameters": {
        "amount": "={{ (Math.floor(Math.random() * (1000 - 100 + 1)) + 100)/100 }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        4580,
        640
      ],
      "id": "a233b9e5-9062-4341-9427-6f082b2c0df2",
      "name": "Wait",
      "webhookId": "f1705b02-fa2f-4a5c-8589-447cf5e7dd7b"
    },
    {
      "parameters": {
        "operation": "push",
        "list": "conversas extraidas",
        "messageData": "={{ $json.fileName }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1000,
        620
      ],
      "id": "43025c53-59f6-4f0f-9c9e-8707e8833866",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "sA2U6PkBocrwko3a",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cb536537-6411-4f6d-8476-d0302922b2d3",
              "name": "data",
              "value": "={{ $('Code').itemjson.data }}",
              "type": "string"
            },
            {
              "id": "b5a71135-04bd-49b2-b7bb-17b5910bbce4",
              "name": "hora",
              "value": "={{ $('Code').item.json.hora }}",
              "type": "string"
            },
            {
              "id": "1a37ca3e-ae68-4a23-a628-870e740ff6d2",
              "name": "remetente",
              "value": "={{ $('Code').item.json.remetente }}",
              "type": "string"
            },
            {
              "id": "624e12de-2279-43f7-956e-30c9a3296ff6",
              "name": "mensagem",
              "value": "={{ $('Code').item.json.mensagem }}",
              "type": "string"
            },
            {
              "id": "f5434292-34cf-4a5f-bb31-c8f6d406ffe9",
              "name": "arquivo",
              "value": "={{ $('Code').item.json.arquivo }}",
              "type": "string"
            },
            {
              "id": "612e6b72-6c87-45c7-a913-9d541e1eb526",
              "name": "index",
              "value": "={{ $('Code').item.json.index }}",
              "type": "number"
            },
            {
              "id": "59caef82-0d3a-4746-bd08-8eb70ae9dc78",
              "name": "tipo",
              "value": "={{ $json.tipo }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3200,
        -240
      ],
      "id": "2404325e-e5a2-4f0a-a8b6-dc3ae5677c80",
      "name": "Edit Fields8"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4000,
        920
      ],
      "id": "636740cc-e7fd-480b-bd9f-e19c53c7b460",
      "name": "Edit Fields5"
    }
  ],
  "connections": {
    "Gerar_Embedding_Cohere": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk4": {
      "main": [
        [
          {
            "node": "Extract from File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File2": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Gerar_Embedding_Cohere",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "list .zip",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extrair zip": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "list .zip": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "list past extraidos": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "numero",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Extrair zip",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Read/Write Files from Disk2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Read/Write Files from Disk1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Replace Me2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Replace Me2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk2": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk3": {
      "main": [
        [
          {
            "node": "Tesseract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Replace Me2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tesseract": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Replace Me2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Sort": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save JSONL File": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Save JSONL File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "numero": {
      "main": [
        [
          {
            "node": "list past extraidos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Replace Me1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Merge By Index",
            "type": "main",
            "index": 1
          },
          {
            "node": "Edit Fields8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me2": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge By Index": {
      "main": [
        [
          {
            "node": "Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields8": {
      "main": [
        [
          {
            "node": "Merge By Index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Replace Me2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "2db19254-bdbb-4af7-932b-a5845ccd0baf",
  "triggerCount": 0,
  "tags": []
}