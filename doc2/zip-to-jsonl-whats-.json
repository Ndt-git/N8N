{
  "createdAt": "2025-07-10T20:51:50.828Z",
  "updatedAt": "2025-07-17T13:55:40.764Z",
  "id": "2GUWbA9vo8uoHomd",
  "name": "zip to JSONL whats",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        40,
        980
      ],
      "id": "40dc8559-e583-4d1b-9998-ea0c56474ab3",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "command": "=unzip -o \"{{ $('Loop Over Items').item.json.path }}\" -d \"/mnt/externo/whatsapp_exports/extracted/n{{ $('numero').item.json.numero }}\"\n"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1800,
        105
      ],
      "id": "14391f93-74ab-4bcd-8f24-ca807b164c0b",
      "name": "Extrair zip"
    },
    {
      "parameters": {
        "command": "ls /mnt/externo/whatsapp_exports/*.zip"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        260,
        980
      ],
      "id": "a7950f7f-c4fb-4e80-9b5f-818068d346cb",
      "name": "list .zip"
    },
    {
      "parameters": {
        "command": "find /mnt/externo/whatsapp_exports/extracted/ -maxdepth 1 -mindepth 1 -type d"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1140,
        255
      ],
      "id": "1773d076-ac6a-499a-b4cc-d572c94c0b8b",
      "name": "list past extraidos"
    },
    {
      "parameters": {
        "jsCode": "// Recebe stdout do Execute Command e transforma em array de caminhos\nconst paths = $json.stdout.trim().split('\\n');\nreturn paths.map(path => ({ json: { path } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        980
      ],
      "id": "b424a8db-b4dc-4ab2-9c26-0aedc89c4f83",
      "name": "Code1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        700,
        980
      ],
      "id": "c6b32a67-f480-4f34-b943-7469df578afe",
      "name": "Loop Over Items",
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        4220,
        -260
      ],
      "id": "678a4bc9-5f9c-4a71-87e5-db98de2b0876"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4c50ea02-80b5-4a1f-a752-54a4d7a120d0",
              "leftValue": "={{ $json.stdout }}",
              "rightValue": "={{ $('numero').item.json.numero }}",
              "operator": {
                "type": "string",
                "operation": "notContains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1360,
        255
      ],
      "id": "434aa013-0197-403e-b51a-6231a6ac5bfe",
      "name": "If"
    },
    {
      "parameters": {
        "fileSelector": "=/mnt/externo/whatsapp_exports/extracted/n{{ $('numero').item.json.numero }}/Conversa do WhatsApp com +55 {{ $('numero').item.json.numero }}.txt",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        2020,
        155
      ],
      "id": "b2eabda7-d23e-4fe4-9e5d-3061f3e1292d",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        2240,
        155
      ],
      "id": "02675593-ea49-48da-9d4b-f35c3fe3d2bf",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "const text = $input.first().json.data;\nconst lines = text.split('\\n');\nlet i = 0;\n\nconst result = [];\nlet lastMessage = null;\n\nfor (const line of lines) {\n    const match = line.match(/^(\\d{2}\\/\\d{2}\\/\\d{4}) (\\d{2}:\\d{2}) - (.*?): (.*)$/);\n    if (match) {\n        const [_, data, hora, remetente1, mensagem] = match;\n        let tipo = \"texto\";\n        let arquivo = null;\n        let mensagem_final = mensagem;\n\n        // Determina se é vendedor ou cliente\n        let remetente = (remetente1.trim() === \"Guardião Lajes\") ? \"vendedor\" : \"cliente\";\n\n        if (mensagem.includes('(arquivo anexado)')) {\n            const fileMatch = mensagem.match(/([\\w\\s\\-\\.\\(\\)]+\\.(opus|mp3|pdf|jpg|jpeg|png))/i);\n            if (fileMatch) {\n                arquivo = fileMatch[1].trim();\n                if (arquivo.match(/\\.(opus|mp3)$/i)) {\n                    tipo = 'audio';\n                    mensagem_final = `#ANEXO_AUDIO:${arquivo}`;\n                } else if (arquivo.endsWith('.pdf')) {\n                    tipo = 'pdf';\n                    mensagem_final = `#ANEXO_PDF:${arquivo}`;\n                } else if (arquivo.match(/\\.(jpg|jpeg|png)$/i)) {\n                    tipo = 'imagem';\n                    mensagem_final = `#ANEXO_IMAGEM:${arquivo}`;\n                } else {\n                    tipo = 'arquivo';\n                    mensagem_final = `#ANEXO:${arquivo}`;\n                }\n            } else {\n                tipo = 'arquivo';\n                mensagem_final = `#ANEXO_INDEFINIDO`;\n            }\n        }\n\n        lastMessage = {\n            data,\n            hora,\n            remetente,   // campo adicional\n            mensagem: mensagem_final,\n            tipo,\n            arquivo,\n            index: i\n        };\n        i++;\n          \n\n        result.push({ json: lastMessage });\n    } else if (lastMessage && line.trim() !== '') {\n        // Adiciona linhas quebradas como continuação da última mensagem\n        lastMessage.mensagem += ' ' + line.trim();\n    }\n}\n\nreturn result;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2460,
        155
      ],
      "id": "b685f0cb-fee9-4a83-af2e-499ff178015f",
      "name": "Code"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "=imagem",
                    "rightValue": "={{ $json.tipo }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "ae50a909-cdd7-40ab-9c8b-aee03b41d426"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "IMAGEM"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "485667e0-d5ec-4825-adb9-992f0c5c096c",
                    "leftValue": "pdf",
                    "rightValue": "={{ $json.tipo }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PDF"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e7af592e-d78d-4b72-8019-82c38e002938",
                    "leftValue": "audio",
                    "rightValue": "={{ $json.tipo }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "AUDIO"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "045b4889-6dc7-4861-b5ae-07b9710d4467",
                    "leftValue": "texto",
                    "rightValue": "={{ $json.tipo }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TEXTO"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "63807e63-56dc-4472-b8df-3c079f8c1c0e",
                    "leftValue": "arquivo",
                    "rightValue": "={{ $json.tipo }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "INDEFINIDO"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2900,
        270
      ],
      "id": "cd1bf749-14c3-4fe9-91d6-38c5c78f6ab0",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5918ae19-e7fd-4a5e-83ae-2911545a83d3",
              "name": "mensagem",
              "value": "={{ $json.mensagem }}",
              "type": "string"
            },
            {
              "id": "f6bed8be-bb1b-4db0-a504-4d1b0c5116a7",
              "name": "index",
              "value": "={{ $('Switch').item.json.index }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3920,
        755
      ],
      "id": "8607d942-ceef-4533-8dd0-bda4c9d62838",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/audio/transcriptions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "whisper-large-v3-turbo"
            },
            {
              "name": "temperature",
              "value": "0"
            },
            {
              "name": "response_format",
              "value": "verbose_json"
            },
            {
              "name": "language",
              "value": "pt"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3340,
        555
      ],
      "id": "466d3382-6730-4dfa-926f-c46499df9384",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "KW0uLEkG9HB7moO8",
          "name": "grok"
        }
      }
    },
    {
      "parameters": {
        "fileSelector": "=/mnt/externo/whatsapp_exports/extracted/n{{ $('Loop Over Items').item.json.path.split('/').pop().replace('.zip', '').match(/(\\d{2} \\d{4}-\\d{4})/)[0] }}/{{ $json.arquivo }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        3120,
        555
      ],
      "id": "6877b4cb-5912-4d02-985f-7c642786474e",
      "name": "Read/Write Files from Disk1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52dd6b8c-deaa-4371-8a34-581a02a64363",
              "name": "mensagem",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "68ace24c-7442-45e2-9647-d46f6533b99a",
              "name": "index",
              "value": "={{ $('Switch').item.json.index }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3920,
        555
      ],
      "id": "d03dc096-7341-4c7f-92eb-6df3bdb37653",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "fileSelector": "=/mnt/externo/whatsapp_exports/extracted/n{{ $('Loop Over Items').item.json.path.split('/').pop().replace('.zip', '').match(/(\\d{2} \\d{4}-\\d{4})/)[0] }}/{{ $json.arquivo }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        3120,
        355
      ],
      "id": "14510ee4-7705-4d82-854b-406100a0dded",
      "name": "Read/Write Files from Disk2"
    },
    {
      "parameters": {
        "fileSelector": "=/mnt/externo/whatsapp_exports/extracted/n{{ $('Loop Over Items').item.json.path.split('/').pop().replace('.zip', '').match(/(\\d{2} \\d{4}-\\d{4})/)[0] }}/{{ $json.arquivo }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        3120,
        55
      ],
      "id": "43d015df-f3d0-4654-911a-d9497633193c",
      "name": "Read/Write Files from Disk3"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        3340,
        355
      ],
      "id": "9b7b4f47-ac70-42bc-b629-e92fd6ba4e05",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "jsCode": "const text = $input.first().json.text || \"\";\n\nlet tipo_pdf = \"documento_generico\";\n\n// Verifica padrões\nif (text.match(/pix|comprovante|transfer[êe]ncia|banco/i)) {\n    tipo_pdf = \"comprovante_pagamento\";\n} else if (text.match(/orcamento|orçamento|val[oa]r total|pedido/i)) {\n    tipo_pdf = \"orcamento\";\n} else if (text.match(/nota fiscal|nf-e|chave de acesso/i)) {\n    tipo_pdf = \"nota_fiscal\";\n}\n\n// Retorna o tipo para roteamento\nreturn [\n    {\n        json: {\n            tipo_pdf,\n            texto_pdf: text // se quiser passar para o próximo passo\n        }\n    }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3630,
        355
      ],
      "id": "c3c8d20c-6e1a-419e-9832-7bfb06024ee3",
      "name": "Code2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52dd6b8c-deaa-4371-8a34-581a02a64363",
              "name": "mensagem",
              "value": "={{ $json.tipo_pdf }}\n{{ $json.texto_pdf }}",
              "type": "string"
            },
            {
              "id": "e22c7deb-05a3-4f45-9179-1f35118a5f80",
              "name": "index",
              "value": "={{ $('Switch').item.json.index }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3920,
        355
      ],
      "id": "eff981e5-618d-44c4-9e95-91ec2f681ba9",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-tesseractjs.tesseractNode",
      "typeVersion": 1,
      "position": [
        3340,
        55
      ],
      "id": "55f64a74-18c9-4c65-ba6c-55a9b6b6f1a4",
      "name": "Tesseract"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "343af6c9-4d48-43ce-b7fe-9e68033c4a06",
              "name": "mensagem",
              "value": "={{ $json.output.descricao_imagem }}",
              "type": "string"
            },
            {
              "id": "e607f7b1-508c-4aa7-a606-6955effcbe63",
              "name": "index",
              "value": "={{ $('Switch').item.json.index }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3920,
        55
      ],
      "id": "e67f00de-200b-46cd-89e3-9cda7e3379da",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "text": "={{ $json.text }}",
        "attributes": {
          "attributes": [
            {
              "name": "descricao_imagem",
              "description": "“Você é especialista em descrição de imagens para RAG. Receberá texto OCR extraído de imagens de WhatsApp ou documentos. Gere uma descrição curta e objetiva, cobrindo apenas:  O que há na imagem (ex: nota fiscal, tabela de preços, conversa).  Principais textos ou frases legíveis.  Layout geral (ex: tabela, parágrafos, colunas).  Evite detalhes desnecessários."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [
        3560,
        -45
      ],
      "id": "cd8f9a56-cc0c-496b-97d1-40e88670d7f8",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3640,
        175
      ],
      "id": "8e833486-4a04-442f-a977-c6c277d5549a",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "GOTIgGndJIkf9Pqy",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "index"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        3120,
        -245
      ],
      "id": "bb01cfd6-dac7-469f-98ae-ebf0e5fd52af",
      "name": "Sort"
    },
    {
      "parameters": {
        "fileName": "=/mnt/externo/whatsapp_exports/extracted/n{{ $('Code3').item.json.numero }}/{{ $('Code3').item.json.numero }}.jsonl",
        "options": {}
      },
      "id": "debdaa61-bf3f-430d-ab76-2832dfa392ca",
      "name": "Save JSONL File",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        3920,
        -245
      ]
    },
    {
      "parameters": {
        "jsCode": "const jsonlLines = items.map(item => JSON.stringify(item.json));\nconst jsonlContent = jsonlLines.join('\\n');\nconst numero = $('numero').first().json.numero;\n\nreturn [{\n  json: {\n    data: jsonlContent,\n    fileName: `whatsapp_export_${Date.now()}`,\n    fileExtension: 'jsonl',\n  numero: numero\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3340,
        -245
      ],
      "id": "04f24e52-4fa7-46a0-bcfd-fbcbdeb805be",
      "name": "Code3"
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "data",
        "options": {
          "encoding": "utf8"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        3630,
        -245
      ],
      "id": "608c13ff-8463-48c5-ab03-2b471b56373b",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cb4863d5-dc62-4248-aeec-6be351113c55",
              "name": "numero",
              "value": "={{ $('Loop Over Items').item.json.path.split('/').pop().replace('.zip', '').match(/(\\d{2} \\d{4}-\\d{4})/)[0] }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        920,
        255
      ],
      "id": "8cd61bdb-6492-4c29-bd5e-15cd3be39d1a",
      "name": "numero"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c1920424-aedc-4364-a708-dfdc88f17cc2",
              "leftValue": "={{ $json.stdout }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1800,
        555
      ],
      "id": "8d107deb-ac53-4c67-beb8-3477ed502fe0",
      "name": "If1"
    },
    {
      "parameters": {
        "command": "=find \"/mnt/externo/whatsapp_exports/extracted/n{{ $('numero').item.json.numero }}\" -name \"{{ $('numero').item.json.numero }}.jsonl\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1580,
        555
      ],
      "id": "d649bfaa-b57e-49ce-bbfe-c29dd1fcb0f3",
      "name": "Execute Command"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me1",
      "typeVersion": 1,
      "position": [
        2020,
        655
      ],
      "id": "7ee30f13-43a9-4bd3-8680-7733792a0bb5"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2680,
        405
      ],
      "id": "ba978bfe-ff0e-47b0-b765-102a4d337907",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me2",
      "typeVersion": 1,
      "position": [
        4140,
        505
      ],
      "id": "db38aa0c-9333-4ed8-8333-884f1725d61c"
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "index",
              "field2": "index"
            }
          ]
        },
        "options": {}
      },
      "id": "3f9db49c-9dcf-47df-989b-ff8f3a4c9c48",
      "name": "Merge By Index",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        2900,
        -245
      ]
    },
    {
      "parameters": {
        "amount": "={{ (Math.floor(Math.random() * (1000 - 100 + 1)) + 100)/100 }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3630,
        555
      ],
      "id": "026b0d65-d4b8-4f47-a710-4d0555d8224b",
      "name": "Wait",
      "webhookId": "f1705b02-fa2f-4a5c-8589-447cf5e7dd7b"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cohere.com/v1/embed",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"embed-english-v3.0\",\n  \"input_type\": \"search_document\",\n  \"texts\": [\n    \"{{ $('Code4').item.json.textContent.replace(/\\n/g, '\\\\n') }}\"\n  ]\n} ",
        "options": {}
      },
      "id": "7dca71b8-c88e-4e29-a629-8cb150848479",
      "name": "Gerar_Embedding_Cohere",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2840,
        980
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "OyCraanHEQ1O0xVC",
          "name": "cohere"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO documents (title, content, embedding)\nVALUES ($1, $2, $3::vector)\nRETURNING id, content;\n",
        "options": {
          "queryReplacement": "={{$('Edit Fields4').item.json[\"title\"]}}, {{$json[\"texts\"]}}, {{ $json[\"embeddings\"] ? '[' + $json[\"embeddings\"].join(\",\") + ']' : '[]' }}\n"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3280,
        980
      ],
      "id": "534f9a4b-9cd2-4596-b3ad-6b5cf3fcc377",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "z2oHR8Hcbud4cXb6",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2840,
        1180
      ],
      "id": "dac3b70b-a58a-4f56-b190-ecc5025221bc",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "fileSelector": "={{ $json.fileName }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1740,
        1020
      ],
      "id": "7f04592f-75ac-452a-b213-d382acc8fe9e",
      "name": "Read/Write Files from Disk4"
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1960,
        1020
      ],
      "id": "e2b9383f-9ca2-4c60-899d-e0197b443f8f",
      "name": "Extract from File2"
    },
    {
      "parameters": {
        "jsCode": "// Função para criar chunks de mensagens para RAG (remetente: mensagem + metadados)\nfunction createMessageChunks(input) {\n\ttry {\n\t\tconst rawData = input[0].data;\n\t\tconst messageLines = rawData.trim().split('\\n');\n\n\t\tconst messages = messageLines.map(line => {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(line);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Erro ao parsear linha:', line);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}).filter(msg => msg !== null);\n\n\t\tconst chunkSize = 5;\n\t\tconst stepSize = 3;\n\t\tconst chunks = [];\n\n\t\tfor (let i = 0; i < messages.length; i += stepSize) {\n\t\t\tconst chunk = messages.slice(i, i + chunkSize);\n\n\t\t\tif (chunk.length > 0) {\n\t\t\t\tconst textContent = chunk.map(msg =>\n\t\t\t\t\t`${msg.remetente}: ${msg.mensagem}`\n\t\t\t\t).join('\\n');\n\n\t\t\t\tchunks.push({\n\t\t\t\t\tchunkId: Math.floor(i / stepSize),\n\t\t\t\t\tstartIndex: i,\n\t\t\t\t\tendIndex: Math.min(i + chunkSize - 1, messages.length - 1),\n\t\t\t\t\tmessageCount: chunk.length,\n\t\t\t\t\ttextContent: textContent,\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tdateRange: {\n\t\t\t\t\t\t\tstart: chunk[0].data,\n\t\t\t\t\t\t\tend: chunk[chunk.length - 1].data\n\t\t\t\t\t\t},\n\t\t\t\t\t\tparticipants: [...new Set(chunk.map(msg => msg.remetente))],\n\t\t\t\t\t\ttotalMessages: chunk.length\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn chunks;\n\n\t} catch (error) {\n\t\tconsole.error('Erro ao processar chunks:', error);\n\t\treturn [{ error: 'Erro ao processar os dados', details: error.message }];\n\t}\n}\n\n// Entrada no n8n\nconst input = [\n\t{\n\t\tdata: $json.data\n\t}\n];\n\n// Processa os chunks\nconst chunks = createMessageChunks(input);\n\n// Retorna uma lista de chunks como itens\nreturn chunks.map(chunk => ({ json: chunk }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2180,
        1020
      ],
      "id": "343f501a-5e99-4204-a3d9-14877f56641f",
      "name": "Code4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "23a613dd-27ef-44ca-a148-f76fa059e8b1",
              "leftValue": "={{ $json.metadata.totalMessages }}",
              "rightValue": 2,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2620,
        1020
      ],
      "id": "bec794d8-8365-4f7e-a5af-22bf6e830c0d",
      "name": "If2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "873643d3-25b5-407e-b20e-664e4ea299ea",
              "name": "title",
              "value": "Atendimento WhatsApp Guardião Lajes",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3060,
        980
      ],
      "id": "685d264b-68c0-4135-b662-80ea0948b42e",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "jsCode": "const normalizeText = (text) => {\n  return text\n    .split('\\n') // separa cada linha de fala\n    .map(line => {\n      const parts = line.split(':');\n      if (parts.length >= 2) {\n        const speaker = parts[0]\n          .toLowerCase()\n          .normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\n          .trim();\n\n        const message = parts.slice(1).join(':')\n          .toLowerCase()\n          .normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\n          .replace(/[^\\w\\s]/g, \"\") // remove pontuação da mensagem\n          .replace(/\\s+/g, \" \")\n          .trim();\n\n        return `${speaker}: ${message}`;\n      } else {\n        // caso seja uma linha sem \":\", apenas normaliza\n        return line\n          .toLowerCase()\n          .normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\n          .replace(/[^\\w\\s]/g, \"\")\n          .replace(/\\s+/g, \" \")\n          .trim();\n      }\n    })\n    .join('\\n');\n};\n\nreturn items.map(item => {\n  const normalized = normalizeText(item.json.textContent);\n\n  return {\n    json: {\n      ...item.json,\n      textContent_normalized: normalized\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2400,
        1020
      ],
      "id": "e5bb67f4-4b8f-4caa-907c-18667052bdc4",
      "name": "Code5"
    },
    {
      "parameters": {
        "operation": "push",
        "list": "test",
        "messageData": "a"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        880,
        980
      ],
      "id": "f759e08f-275b-47c7-91e4-b494af90c9d8",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "sA2U6PkBocrwko3a",
          "name": "Redis account"
        }
      }
    }
  ],
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "list .zip",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "list .zip": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "list past extraidos": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extrair zip": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "numero",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Extrair zip",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge By Index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Read/Write Files from Disk2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Read/Write Files from Disk1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Read/Write Files from Disk1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk2": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk3": {
      "main": [
        [
          {
            "node": "Tesseract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tesseract": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Replace Me2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Replace Me2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Replace Me2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Replace Me2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Save JSONL File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "numero": {
      "main": [
        [
          {
            "node": "list past extraidos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save JSONL File": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Replace Me1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Merge By Index",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me2": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge By Index": {
      "main": [
        [
          {
            "node": "Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gerar_Embedding_Cohere": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk4": {
      "main": [
        [
          {
            "node": "Extract from File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File2": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Gerar_Embedding_Cohere",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "6a88aa99-f1f3-459d-89f4-078f1a8f646c",
  "triggerCount": 0,
  "tags": []
}