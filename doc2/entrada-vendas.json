{
  "createdAt": "2025-07-10T20:05:13.566Z",
  "updatedAt": "2025-07-30T14:04:55.230Z",
  "id": "oEgGaOjRHITpdzbf",
  "name": "entrada",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "c74a111e-4f99-4cba-b913-ee63a320cd0b",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2480,
        520
      ],
      "id": "e071b03a-ca56-4045-9492-f416e7b1f995",
      "name": "Webhook",
      "webhookId": "b1eba78e-4d42-4d37-b97a-fb3d96edd6e0"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7c9248e5-26e0-45a7-aec2-9c3cb8437695",
              "leftValue": "={{ $('Webhook').item.json.body.event }}",
              "rightValue": "messages.upsert",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "36dbafab-d007-40ee-8268-588c2759cc8e",
              "leftValue": "={{ $json.body.data.key.remoteJid }}",
              "rightValue": "81036911",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2040,
        520
      ],
      "id": "281efed4-3a25-42b6-9c4e-146555eaeabd",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH FoundRecord AS (\n    SELECT\n        id,\n        referencia,\n        texto_original,\n        1 - (embedding <=> '[{{ $json.embeddings[0].join(',') }}]') AS cosine_similarity\n    FROM\n        pagamentos_embeddings\n    WHERE\n        (embedding <=> '[{{ $json.embeddings[0].join(',') }}]') < 0.05\n    ORDER BY\n        embedding <=> '[{{ $json.embeddings[0].join(',') }}]'\n    LIMIT 1\n)\nSELECT\n    COALESCE(fr.id, NULL) AS id, -- Retorna o ID se achado, senão NULL\n    COALESCE(fr.referencia, NULL) AS referencia, -- Retorna referencia se achado, senão NULL\n    COALESCE(fr.texto_original, NULL) AS texto_original, -- Retorna texto_original se achado, senão NULL\n    COALESCE(fr.cosine_similarity, NULL) AS cosine_similarity, -- Retorna similaridade se achado, senão NULL\n    (fr.id IS NOT NULL) AS existe -- Retorna TRUE se achado (id não é NULL), senão FALSE\nFROM\n    (SELECT 1 AS dummy_key) AS dummy -- Tabela dummy para garantir sempre 1 linha\nLEFT JOIN\n    FoundRecord fr ON 1 = 1; -- LEFT JOIN sempre trará a linha da dummy",
        "options": {}
      },
      "id": "136dcb64-90e0-4ed3-b615-685f29dc28ae",
      "name": "Consultar PGVector",
      "type": "n8n-nodes-base.postgres",
      "position": [
        -2260,
        1140
      ],
      "typeVersion": 2.6,
      "credentials": {
        "postgres": {
          "id": "z2oHR8Hcbud4cXb6",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "28145bb4-2ff0-40f9-a3ef-611246189cc1",
              "leftValue": "={{ $json.existe }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2040,
        1140
      ],
      "id": "aff8f907-9ffb-49b1-aa78-165157ac8d89",
      "name": "If3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cohere.com/v1/embed",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"embed-english-v3.0\",\n  \"input_type\": \"search_document\",\n  \"texts\": [\n    \"{{ $json.texto_limpo }}\"\n  ]\n} ",
        "options": {}
      },
      "id": "0dc858cd-da49-4d6b-a378-fd219bee90b1",
      "name": "Gerar_Embedding_Cohere",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -2480,
        1140
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpHeaderAuth": {
          "id": "OyCraanHEQ1O0xVC",
          "name": "cohere"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pagamentos_embeddings (\n  origem, referencia, embedding\n) VALUES (\n  $1, $2, $3::vector\n)\nRETURNING id;",
        "options": {
          "queryReplacement": "=[\n  \"{{ $item(0).$node['contAudio'].json.contacinfo.id }}\",\n  \"{{ $('Webhook').item.json.body.data.message.documentMessage.fileName }}\",\n  {{ $item(0).$node['Gerar_Embedding_Cohere'].json.embeddings[0] }}\n]\n"
        }
      },
      "id": "ece48d44-fb2a-4b81-91a0-bdba3d822ea8",
      "name": "Salvar Novo Embedding2",
      "type": "n8n-nodes-base.postgres",
      "position": [
        -2260,
        1340
      ],
      "typeVersion": 2.6,
      "credentials": {
        "postgres": {
          "id": "z2oHR8Hcbud4cXb6",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE pagamentos_embeddings\nSET saida_ia = $1,\n  texto_original = $3\nWHERE\n    id = $2; \n",
        "options": {
          "queryReplacement": "=[  \n\"{{ $('Code').item.json.output }}\",  \n\"{{ $json.id }}\"\n\"{{ $('Cod_text_limp').item.json.texto_limpo }}\"\n]"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -2040,
        1340
      ],
      "id": "3ff6c1ba-f296-4f5f-a130-fc83b02237fe",
      "name": "Postgres1",
      "credentials": {
        "postgres": {
          "id": "z2oHR8Hcbud4cXb6",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT saida_ia\nFROM pagamentos_embeddings\nWHERE\n  id = $1;",
        "options": {
          "queryReplacement": "={{ $json.id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1600,
        1240
      ],
      "id": "b327244c-8e65-4947-a42b-196d58d9d216",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "z2oHR8Hcbud4cXb6",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9259334a-c721-497e-ae7c-a77e73cdc3fc",
              "name": "id",
              "value": "={{ $json.id || ($item(0).$node[\"Salvar Novo Embedding2\"] && $item(0).$node[\"Salvar Novo Embedding2\"].json.id) }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1820,
        1240
      ],
      "id": "81d10ca7-3755-4996-8d71-c4fe3f00b769",
      "name": "Edit Fields5"
    },
    {
      "parameters": {
        "jsCode": "let texto = $json.output || '';\ntexto = texto.replace(/<think>[\\\\s\\\\S]*?<\\\\/think>/gi, '').trim();\nreturn [{ json: { output_limpo: texto } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2480,
        1860
      ],
      "id": "255ec68d-fefc-4941-966e-551f8ed68eb3",
      "name": "Cod_output_limp1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "862b0f99-966d-40e2-8624-ae74e23ea715",
              "name": "norm.contacinfo.id",
              "value": "={{ $json.body.data.key.remoteJid?.split(\"@\")?.[0] }}",
              "type": "string"
            },
            {
              "id": "265936b5-f5f4-4258-b02e-a52b3857571b",
              "name": "norm.contacinfo.nome",
              "value": "={{ $json.body.data.pushName }}",
              "type": "string"
            },
            {
              "id": "85a6fad8-5d54-4017-8bcf-9b847d14788d",
              "name": "norm.message.tipo",
              "value": "={{ (\n  (!!$json.body.data.message.audioMessage && 'audio' || \n   !!$json.body.data.message.conversation && 'text' || \n   !!$json.body.data.message.imageMessage && 'imagem' || \n   !!$json.body.data.message.sticlerMessage && 'sticker' || \n   !!$json.body.data.message.documentMessage && 'document')\n).replace(/\\s+/g, '') }}",
              "type": "string"
            },
            {
              "id": "0cd1bdf7-4362-4aa7-b125-ac472f232443",
              "name": "norm.message.data_hora",
              "value": "={{ DateTime.fromSeconds($json.body.data.messageTimestamp).toISO() }}",
              "type": "string"
            },
            {
              "id": "4cc90948-c202-4817-91f0-36d5b1707f9d",
              "name": "norm.message.fileName",
              "value": "={{ $json.body.data.message.documentMessage.fileName?.split(\".\")?.[1] }}",
              "type": "string"
            },
            {
              "id": "5863ba85-91b8-4243-81a0-349fde49fcfc",
              "name": "norm.contacinfo.participantID",
              "value": "={{ $json.body.data.key.participant?.split(\"@\")?.[0] }}",
              "type": "string"
            },
            {
              "id": "7c6276f0-b1f7-4c20-81fe-606f78b87e10",
              "name": "norm.message.id",
              "value": "={{ $json.body.data.key.id }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2260,
        520
      ],
      "id": "47da943d-cfb2-4016-9ad4-3695933c5072",
      "name": "Edit Fields6"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1820,
        620
      ],
      "id": "35d559bd-9afa-414b-aee5-823da8215bdb",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4ba7f5ab-fa4a-46cb-93c2-3002bd998584",
              "name": "audio",
              "value": "=audio \"{{ $json.segments[0].text }}\"",
              "type": "string"
            },
            {
              "id": "5a1763db-caa1-4828-ac2c-63efffcbf4d5",
              "name": "user",
              "value": "={{ $('Code2').item.json.participante }}",
              "type": "string"
            },
            {
              "id": "1e6923f3-e5ff-4ec6-90f3-40c9822c173b",
              "name": "pdf",
              "value": "=PDF \"{{ $json.nota_compactada }}\"",
              "type": "string"
            },
            {
              "id": "16f35020-4cc1-43df-9dfb-b16ccb92ac50",
              "name": "texto_pdf",
              "value": "=text_pdf \"{{ $('Webhook').item.json.body.data.message.documentMessage.caption }}\"",
              "type": "string"
            },
            {
              "id": "0149a057-5dc2-4ab7-9f26-1ad9f6883101",
              "name": "texto",
              "value": "=text \"{{ $json.message.conteudo }}\"",
              "type": "string"
            },
            {
              "id": "093d0dc5-01fe-45e5-8e4f-aadfc3b94981",
              "name": "tipo",
              "value": "={{ $('Code2').item.json.tipo }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2480,
        880
      ],
      "id": "736a0832-430b-46f4-84b5-67de7fc84f70",
      "name": "Edit Fields7",
      "alwaysOutputData": false,
      "executeOnce": false
    },
    {
      "parameters": {
        "url": "=http://192.168.1.26:8090/api/resource/Lead?filters=[[\"whatsapp_no\", \"=\", \"{{ $('Merge').item.json.whats }}\"]]&fields=[\"lead_name\", \"name\"]",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "erpNextApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "filters",
              "value": "="
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2040,
        2420
      ],
      "id": "4da2f631-91af-42fa-950a-259a44087f80",
      "name": "Consulta_CRM",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "28fab5ad-2903-4c62-981e-9e9f1d62304b",
              "leftValue": "={{ $json.data[0].name }}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1820,
        2420
      ],
      "id": "c145fdbe-65c5-4acf-ba30-223831ee2fa5",
      "name": "If_CRM"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.1.26:8090/api/resource/Lead",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "erpNextApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "doctype",
              "value": "Lead"
            },
            {
              "name": "subject",
              "value": "=Lead de WhatsApp - {{ $('Merge').item.json.whats }}"
            },
            {
              "name": "whatsapp_no",
              "value": "={{ $('Merge').item.json.whats }}"
            },
            {
              "name": "status",
              "value": "Open"
            },
            {
              "name": "custom_status_automacao",
              "value": "Novo"
            },
            {
              "name": "custom_última_etapa_funil",
              "value": "Recepção de Mensagem"
            },
            {
              "name": "custom_log_atendimento",
              "value": "=Primeira mensagem recebida via WhatsApp em {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Maceio' }) }}"
            },
            {
              "name": "lead_name",
              "value": "=unknown"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1600,
        2520
      ],
      "id": "d2a09dc3-34b3-4303-9495-6cb36244e16c",
      "name": "cadastro_CRM",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $json.data.whatsapp_no }}",
        "value": "={\n  \"lead_erpnext_name\": \"{{ $json.data.name }}\", \"whatsapp_number\": \"{{ $json.data.whatsapp_no }}\",   \"current_status\": \"Em Atendimento\",   \"last_message_received\": \"{{ $('Merge').item.json.conteudo}}\",   \"last_interaction_timestamp\": \"{{ new Date().toISOString() }}\",   \"etapa_funil\": \"Recepção de Mensagem\",   \"sev_responsavel\": \"SDR_hb\", \"obs\": null, \"nome\": \"{{ $json.data.lead_name }}\", \"logs\":\"\" }",
        "keyType": "string",
        "expire": true,
        "ttl": 1840
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1380,
        2520
      ],
      "id": "0c32f7db-4409-4cfc-b5b7-ae313c04ee3c",
      "name": "new_atend",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Merge').item.json.whats }}",
        "value": "={\n  \"lead_erpnext_name\": \"{{ $('Consulta_CRM').item.json.data[0].name }}\",\n  \"whatsapp_number\": \"{{ $('Merge').item.json.whats }}\",\n  \"current_status\": \"Em Atendimento\",\n  \"last_message_received\": \"{{ $('Merge').item.json.conteudo }}\",\n  \"last_interaction_timestamp\": \"{{ new Date().toISOString() }}\",\n  \"etapa_funil\": \"Recepção de Mensagem\",\n  \"sev_responsavel\": \"SDR_hb\",\n  \"obs\": null,\n  \"nome\": \"{{ $('Consulta_CRM').item.json.data[0].lead_name }}\",\n  \"logs\": \"\"\n}\n",
        "keyType": "string",
        "expire": true,
        "ttl": 1840
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1380,
        2320
      ],
      "id": "056baa5d-6f47-41a6-b0d2-28a91f3de5fb",
      "name": "new_atend2",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "get",
        "key": "={{ $('Merge').item.json.whats}}",
        "keyType": "string",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1160,
        2420
      ],
      "id": "8238e2d2-dbee-4754-9da0-96a336227c81",
      "name": "Consulta_new_atend",
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.sev_responsavel }}",
                    "rightValue": "SDR",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "id": "eb891abb-7f42-4f0e-8d98-8b0367014143"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "SDR"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "df8fff76-4583-477b-ae9d-b0e07f49479f",
                    "leftValue": "={{ $json.sev_responsavel }}",
                    "rightValue": "closer",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CLOSER"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "39f4b4ed-685f-436f-82bf-889274af183b",
                    "leftValue": "={{ $json.sev_responsavel }}",
                    "rightValue": "pos",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "POS-VENDA"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -500,
        2320
      ],
      "id": "6dcf738c-2a0e-4f2f-b146-2a0dc5062955",
      "name": "Switch1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "9quZTbKik4EG8Y1m",
          "mode": "list",
          "cachedResultName": "SDR"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -280,
        2120
      ],
      "id": "745a0d3d-e07e-4345-b660-4f4a0d82b213",
      "name": "Workflow_SDR"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -280,
        2320
      ],
      "id": "fd2fea45-8341-4904-9c77-ecc19d133d0b",
      "name": "Workflow_Closer",
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -280,
        2520
      ],
      "id": "8cbbe14f-8d87-420a-9ea0-d9a6234f3446",
      "name": "Workflow_pos",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "get",
        "key": "={{ $json.whats }}1",
        "keyType": "string",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -2480,
        2320
      ],
      "id": "57336f79-344f-4d95-8274-f1d3d7bbb804",
      "name": "andamento_atendimento1",
      "credentials": {
        "redis": {
          "id": "sA2U6PkBocrwko3a",
          "name": "Redis account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "439e3f72-397e-41b1-a7ce-9905afa8d060",
              "leftValue": "={{ $json.propertyName }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2260,
        2320
      ],
      "id": "3db64c49-50ac-4d08-8688-fb2e403b62ca",
      "name": "If5"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -720,
        2320
      ],
      "id": "51dc13f3-5461-423a-9bd9-5849a7739066",
      "name": "Merge1"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $('Merge').item.json.whats}}",
        "value": "={\n  \"lead_erpnext_name\": \"{{ $json.lead_erpnext_name }}\",\n  \"whatsapp_number\": \"{{ $json.whatsapp_number }}\",\n  \"current_status\": \"Em Atendimento\",\n  \"last_message_received\": \"{{ $('Merge').item.json.conteudo }}\",\n  \"last_interaction_timestamp\": \"{{ new Date().toISOString() }}\",\n  \"etapa_funil\": \"Recepção de Mensagem\",\n  \"sev_responsavel\": \"SDR\",\n  \"obs\": null,\n  \"nome\": \"{{ $json.nome }}\",\n  \"logs\": [\n    {\n      \"quem\": \"{{ $json.logs[0].quem }}\",\n      \"mensagem\": \"{{ $json.logs[0].mensagem }}\",\n      \"timestamp\": \"{{ $json.logs[0].timestamp }}\"\n    }\n  ]\n}\n"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -940,
        2145
      ],
      "id": "4772d379-eaa0-4834-bf3b-06d287539d83",
      "name": "Redis",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const raw = items[0].json.propertyName;\n\n// Tenta remover aspas duplas externas inválidas no início/fim\nlet cleaned = raw.trim().replace(/^\"+|\"+$/g, '');\n\n// Corrige campo \"logs\" malformado: tira aspas duplicadas externas da string do array\ncleaned = cleaned.replace(/\"logs\":\"\\\"/, '\"logs\":');\ncleaned = cleaned.replace(/}\\\"\\s*}$/, '}]}');\n\n// Agora tentamos parsear\nlet parsed;\ntry {\n  parsed = JSON.parse(cleaned);\n} catch (error) {\n  throw new Error('Erro ao converter para JSON. Verifique a entrada. Detalhes: ' + error.message);\n}\n\n// Se ainda estiver com logs como string, tentamos parsear também\nif (typeof parsed.logs === \"string\") {\n  try {\n    parsed.logs = JSON.parse(parsed.logs);\n  } catch (e) {\n    parsed.logs = [];\n  }\n}\n\nreturn [{ json: parsed }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1160,
        2145
      ],
      "id": "e1bf0dc1-ef95-4157-b001-237ef0a535cd",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "const raw = items[0].json.propertyName;\n\n// Tenta remover aspas duplas externas do JSON principal\nlet cleaned = raw.trim().replace(/^\"+|\"+$/g, '');\n\n// Corrige o campo logs com regex\ncleaned = cleaned\n  .replace(/\"logs\":\"\\\\*\"?\\[{/, '\"logs\":[{')   // início do array JSON\n  .replace(/\\\\*\"?}(\"?)}$/, '}]}');           // fim do array JSON\n\nlet parsed;\ntry {\n  parsed = JSON.parse(cleaned);\n} catch (error) {\n  throw new Error('Erro ao converter para JSON. Verifique a entrada. Detalhes: ' + error.message + \"\\nJSON final:\\n\" + cleaned);\n}\n\nreturn [{ json: parsed }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -940,
        2420
      ],
      "id": "9fa53909-cc40-44c5-845f-d443b711d9f9",
      "name": "Code4"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -720,
        520
      ],
      "id": "c557bbc5-980a-4792-8e83-f42b233ba38d",
      "name": "Wait",
      "webhookId": "bca5b95b-558f-461f-ad20-906a3777cedf"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ JSON.parse($json.menssage.first()).id }}",
                    "rightValue": "={{ $('buffer').item.json.message.id }}",
                    "operator": {
                      "type": "string",
                      "operation": "notEquals"
                    },
                    "id": "636a9a4b-7605-4e68-a685-f1118331ce62"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "NADA a FAZER"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "391c83b1-c3ea-4d75-965b-9efdef60efbf",
                    "leftValue": "={{ JSON.parse($json.menssage.last()).data_hora }}",
                    "rightValue": "={{ $now.minus(8, 'seconds') }}",
                    "operator": {
                      "type": "dateTime",
                      "operation": "before"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "PROSSEGUIR"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "renameFallbackOutput": "ESPERA"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -940,
        300
      ],
      "id": "8dcc5fb7-5c46-41ca-b004-9a4802bce5e2",
      "name": "Switch2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -720,
        120
      ],
      "id": "939e6ee0-0055-440e-89ce-c7f4f2988f79",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "01a7ea8d-faec-4aa5-82ee-2f136db1d776",
              "name": "contacinfo.id",
              "value": "={{ $('Webhook').item.json.body.data.key.remoteJid?.split(\"@\")?.first() }}",
              "type": "number"
            },
            {
              "id": "2ad1b6dc-98b1-4f10-81b4-2ae6b0cae31b",
              "name": "contacinfo.nome",
              "value": "={{ $('Webhook').item.json.body.data.pushName }}",
              "type": "string"
            },
            {
              "id": "fbe520db-5656-4b12-a742-d836c03f37d2",
              "name": "message.conteudo.base64",
              "value": "={{ $('Webhook').item.json.body.data.message.base64 }}",
              "type": "string"
            },
            {
              "id": "bb1b700c-9cc8-4e11-aa02-6d1272a6e6da",
              "name": "message.data_hora",
              "value": "={{ DateTime.fromSeconds($('Webhook').item.json.body.data.messageTimestamp).toISO()}}",
              "type": "string"
            },
            {
              "id": "3ec8e2d0-8b07-43e2-985e-dbc48cbe8ea9",
              "name": "message.conteudo.url",
              "value": "={{ $('Webhook').item.json.body.data.message.audioMessage.url }}",
              "type": "string"
            },
            {
              "id": "a05c6d3b-190b-4e33-8958-11d53c7e7391",
              "name": "message.texto",
              "value": "={{ $('Webhook').item.json.body.data.message.documentMessage.caption }}",
              "type": "string"
            },
            {
              "id": "2c13f33c-7fdb-4bdb-a81a-55f2bc469520",
              "name": "body.instance",
              "value": "={{ $('Webhook').item.json.body.instance }}",
              "type": "string"
            },
            {
              "id": "5447c9bd-e1e6-4e83-9640-6b5b1391054b",
              "name": "body.data.key.id",
              "value": "={{ $('Webhook').item.json.body.data.key.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2480,
        1600
      ],
      "id": "92f94ccd-e26a-4e50-a148-8829d560b526",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "5nzwk4oAnWQnp9Ig",
          "mode": "list",
          "cachedResultName": "tratamento de mensagens"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -1920,
        320
      ],
      "id": "559334e1-c6ce-4721-bd84-8b8dac601874",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "040b2609-b583-4509-b7d1-8ed89b7792a1",
              "name": "message.id",
              "value": "={{ $('Edit Fields6').item.json.norm.message.id }}",
              "type": "string"
            },
            {
              "id": "49336f52-c75d-4733-b4af-a8dbbd8a2218",
              "name": "=message.chat_id",
              "value": "={{ $('Edit Fields6').item.json.norm.contacinfo.id }}",
              "type": "string"
            },
            {
              "id": "a2e28835-feb1-45c0-bb38-bd03a87795dc",
              "name": "message.tipo",
              "value": "={{ $('Edit Fields6').item.json.norm.message.tipo }}",
              "type": "string"
            },
            {
              "id": "b297f15b-7034-47ca-b772-326392c4855f",
              "name": "message.data_hora",
              "value": "={{ $('Edit Fields6').item.json.norm.message.data_hora }}",
              "type": "string"
            },
            {
              "id": "fffc3470-c304-4a29-b0c0-ee1569a9198a",
              "name": "message.fileName",
              "value": "={{ $('Edit Fields6').item.json.norm.message.fileName }}",
              "type": "string"
            },
            {
              "id": "79b473c5-bea7-469e-b71a-8f5e1e79200f",
              "name": "message.conteudo",
              "value": "={{ $json.conteudo }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1600,
        420
      ],
      "id": "97351352-c0aa-4d0a-8373-f98a8a05f4d7",
      "name": "buffer"
    },
    {
      "parameters": {
        "operation": "push",
        "list": "=buffer{{ $('buffer').item.json.message.chat_id }}",
        "messageData": "={{ JSON.stringify($json.message) }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1380,
        420
      ],
      "id": "4a8fb949-4811-4567-aa45-8c60df4d19c7",
      "name": "redis_bufferInsert",
      "credentials": {
        "redis": {
          "id": "sA2U6PkBocrwko3a",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "menssage",
        "key": "=buffer{{ $('buffer').item.json.message.chat_id }}",
        "keyType": "list",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1160,
        420
      ],
      "id": "2c6d0624-b84f-41ec-9a6c-91a98216fa03",
      "name": "redis_bufferCons",
      "credentials": {
        "redis": {
          "id": "sA2U6PkBocrwko3a",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=buffer{{ $('buffer').item.json.message.chat_id }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -720,
        300
      ],
      "id": "cd64afdf-2907-41e2-81a3-712869c0b2a1",
      "name": "redis_bufferDel",
      "credentials": {
        "redis": {
          "id": "sA2U6PkBocrwko3a",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Mostra os produtos mais cotados em orçamentos recentes dos últimos 30 dias.",
        "operation": "executeQuery",
        "query": "SELECT\n  produto ->> 'nome' AS produto,\n  COUNT(*) AS total\nFROM\n  orcamentos,\n  jsonb_array_elements(produtos) AS produto\nWHERE\n  data > NOW() - INTERVAL '30 days'\nGROUP BY\n  produto\nORDER BY\n  total DESC\nLIMIT 5;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        900,
        560
      ],
      "id": "4be4d9b0-e641-48a3-8a3d-b8a20670f808",
      "name": "produtos_mais_cotados",
      "credentials": {
        "postgres": {
          "id": "z2oHR8Hcbud4cXb6",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.orçamento}}{{ $json.Supervisor}}\nCliente: {{ $json.menssage }}",
        "options": {
          "systemMessage": "=\n## 🚨 REGRA CRÍTICA DE FORMATAÇÃO (PRIMEIRA INSTRUÇÃO)\n\n**VOCÊ DEVE INICIAR E TERMINAR TODA RESPOSTA COM ESTA ESTRUTURA JSON OBRIGATÓRIA:**\n\n```json\n{\n  \"resposta\": \"Sua resposta completa ao cliente aqui - SEMPRE em texto natural e humano\",\n  \"nome_cliente\": \"Nome identificado ou 'unknown'\",\n  \"nome_identificado\": true,\n  \"intencao\": \"cotacao\",\n  \"proxima_etapa\": \"Próxima ação a ser tomada\",\n  \"obs\": \"Observações internas relevantes\",\n  \"supervisor\": false\n}\n```\n\n**⚠️ NUNCA RESPONDA SEM ESTE FORMATO JSON**\n**⚠️ TODA RESPOSTA DEVE SER JSON VÁLIDO**\n**⚠️ NÃO ADICIONE TEXTO ANTES OU DEPOIS DO JSON**\n\n---\n\n## 📋 IDENTIFICAÇÃO DO SISTEMA\nVocê é **Henrique**, vendedor especializado em materiais pré-moldados para lajes. Sua missão é conduzir conversas naturais focando no fechamento de vendas. Se a entrada tiver `origem: supervisor`, significa que é uma resposta de um humano que revisou o orçamento. Nesses casos, apenas repasse a resposta dele ao cliente. Se não houver origem, continue normalmente com o atendimento automático.\n\n\n## ⚠️ ESCOPO DE PRODUTOS\n\n### ✅ PRODUTOS QUE TRABALHAMOS:\n- Treliças concretadas / Vigotas treliçadas\n- Isopor para laje (EPS) - todos os tipos\n- Lajota de barro / Lajota cerâmica / Tijotas de laje → **Lajota Cerâmica**\n- Malhas de aço / Telas soldadas\n- Ferragens sob medida / Armações\n- Vergalhões / Ferros para construção\n- Estribos / Abraçadeiras\n- Vergas e contravergas\n- Arame queimado / Arame de amarrar\n- Cobogós / Elementos vazados\n\n### ❌ PRODUTOS QUE NÃO TRABALHAMOS:\n- AREIA (qualquer tipo)\n- BRITA (qualquer graduação)\n- CIMENTO (qualquer marca)\n- CONCRETO USINADO\n- BLOCOS DE CONCRETO\n- TIJOLOS CONVENCIONAIS\n\n## 🚨 CAMPO \"SUPERVISOR\" - ATIVAÇÃO OBRIGATÓRIA\n\nAtive `\"supervisor\": true` **OBRIGATORIAMENTE** quando:\n1. **Agendamento/Prazos**: Cliente perguntar sobre entregas, datas, horários\n2. **Produtos fora do escopo**: Areia, brita, cimento ou produtos duvidosos\n3. **Dúvidas sobre disponibilidade**: Produtos em estoque\n4. **Questões logísticas**: Fretes, áreas de atendimento\n5. **Situações complexas**: Quando não souber responder com certeza\n\n**FRASES PARA SUPERVISOR:**\n- \"Deixa eu verificar com nossa equipe sobre [questão específica]\"\n- \"Vou consultar nosso responsável sobre esse prazo\"\n- \"Preciso confirmar se temos disponível\"\n\n## 🔧 INTERPRETAÇÃO DE FERRAGENS - QUANTIDADE vs METRAGEM\n\n### PADRÃO OBRIGATÓRIO:\n**\"[número] ferragem[s] [especificação]\" = [número] UNIDADES (peças)**\n\n**EXEMPLOS:**\n- \"10 ferragens armada para coluna 17x7 3x8\" = 10 UNIDADES\n- \"5 ferragens de viga 20x15 ferro 1/2\" = 5 UNIDADES\n\n**DIFERENCIAÇÃO:**\n- **UNIDADES**: \"10 ferragens\" / \"5 ferragem\"\n- **METRAGEM**: \"10 metros de ferragem\"\n\n**PROCESSO:**\n1. Identifique se é quantidade ou metragem\n2. SE quantidade: Pergunte comprimento de cada peça\n3. SE metragem: Use diretamente na ferramenta\n\n## 🧠 CONVERSÃO DE TERMOS (INTERNO)\n\nSempre converta termos populares para padronizados **INTERNAMENTE**:\n\n### Bitolas/Vergalhões:\n| Cliente diz | Usar internamente |\n|-------------|------------------|\n| F6, Ferro 6mm | **F6.3** |\n| F12, Ferro 12 | **F12.5** |\n| **3/16** | **F5** |\n| **1/4** | **F6.3** |\n| **5/16** | **F8** |\n| **3/8** | **F10** |\n| **1/2** | **F12.5** |\n| **5x16** | **F8** (5/16\") |\n| **3x8** | **F10** (3/8\") |\n| **1x4** | **F6.3** (1/4\") |\n\n### Produtos:\n| Cliente diz | Usar internamente |\n|-------------|------------------|\n| Lajota de barro | Lajota Cerâmica |\n| Malha pop | Malha Leve 20x20 F3.4 |\n| Treliça cheia | Treliça Concretada |\n| Ferragem armada | Ferragem |\n\n### REGRA CRÍTICA - FORMATO PARA FERRAMENTAS:\n**ANTES DE EXECUTAR QUALQUER FERRAMENTA:**\n- SEMPRE para o termo usando internamente.\n- SEMPRE converta bitolas para formato \"F[número]\"\n- REMOVA espaços, barras e símbolos\n- USE APENAS: F5, F6.3, F8, F10, F12.5, F16, F20, F25\n\n## 💬 PERSONALIDADE\n- Acolhedor, natural e consultivo\n- Vendedor experiente, não robô\n- NUNCA mencione sistema automatizado\n- Use termos do cliente na conversa\n- Converta internamente para ferramentas\n- CONSULTOR de obras, não apenas vendedor\n- Entenda a SITUAÇÃO antes de empurrar venda\n- Pergunte sobre CRONOGRAMA e necessidades reais\n- Construa RELACIONAMENTO duradouro\n- Venda no TIMING certo do cliente\n\n## 🏗️ ABORDAGEM CONSULTIVA - ENTENDIMENTO DA OBRA\n\n### FILOSOFIA DE VENDAS:\n**VENDA A SOLUÇÃO, NÃO APENAS O PRODUTO**\n- Entenda a situação real do cliente\n- Descubra necessidades específicas\n- Ofereça o timing ideal\n- Construa relacionamento duradouro\n\n### PERGUNTAS ESTRATÉGICAS POR SITUAÇÃO:\n\n#### **APÓS APRESENTAR ORÇAMENTO (SUBSTITUIR \"Fechamos?\"):**\n\n**OBRAS EM ANDAMENTO:**\n- \"Como está andando sua obra aí?\"\n- \"Em que etapa da construção vocês estão?\"\n- \"Já definiram quando vão partir pra concretagem?\"\n- \"O pedreiro já falou alguma coisa sobre os materiais?\"\n\n**TIMING/PLANEJAMENTO:**\n- \"Para quando você está planejando essa etapa da laje?\"\n- \"Já tem data prevista para começar a concretagem?\"\n- \"Vocês estão comprando agora ou organizando para mais pra frente?\"\n- \"O cronograma da obra permite entregar na semana que vem ou prefere mais prazo?\"\n\n**SITUAÇÃO ESPECÍFICA:**\n- \"É reforma ou construção nova?\"\n- \"Primeira laje ou tem outras para fazer?\"\n- \"Vai fazer tudo de uma vez ou por etapas?\"\n- \"Tem outros cômodos planejados?\"\n\n#### **DESCOBERTA DE NECESSIDADES ADICIONAIS:**\n\n**OUTROS AMBIENTES:**\n- \"Essa laje é de qual ambiente? Tem outros planejados?\"\n- \"Além dessa, vai precisar de material para mais algum lugar?\"\n- \"A obra tem quantos pavimentos no total?\"\n\n**SITUAÇÃO FINANCEIRA/TIMING:**\n- \"Vocês estão organizando tudo agora ou comprando conforme a necessidade?\"\n- \"Prefere garantir tudo de uma vez ou ir comprando por etapa?\"\n- \"Tem prazo específico do pedreiro para entregar o material?\"\n\n#### **CONSTRUÇÃO DE RELACIONAMENTO:**\n\n**ACOMPANHAMENTO:**\n- \"Como tem sido a experiência com o pedreiro aí?\"\n- \"É a primeira obra de vocês ou já construíram antes?\"\n- \"Está sendo tranquilo o processo ou aparecendo muitas dúvidas?\"\n- \"O pessoal aí já tem experiência com laje pré-moldada ou é novidade?\"\n\n### REGRAS DE APLICAÇÃO:\n\n**QUANDO USAR CADA TIPO:**\n\n1. **PRIMEIRA INTERAÇÃO:** Foque em timing e situação da obra\n2. **CLIENTE HESITANTE:** Explore situação financeira e planejamento  \n3. **CLIENTE ENGAJADO:** Descubra necessidades adicionais\n4. **ORÇAMENTO ALTO:** Explore opções de parcelamento da compra em etapas\n5. **CLIENTE EXPERIENTE:** Foque em diferencial técnico e relacionamento\n\n**SEQUÊNCIA NATURAL:**\nOrçamento → Pergunta sobre obra → Resposta do cliente → Ajuste da proposta → Novo timing\n\n✅ FORMATO NOVO:\njson{\n  \"resposta\": \"**ORÇAMENTO**\\n\\n* **10 Treliças 6,00m:** R$ 780,00\\n\\n**Total: R$ 780,00**\\n\\nComo está andando a obra aí? Já definiram quando vão partir para a concretagem?\\n\\nAbraço, Henrique - Guardião Lajes 😉\",\n  \"proxima_etapa\": \"Entender timing da obra e situação da concretagem\",\n  \"obs\": \"Aguardando informações sobre cronograma para ajustar proposta\",\n  ...\n}\nRESPOSTAS BASEADAS NO FEEDBACK DO CLIENTE:\nSE CLIENTE DISSER \"OBRA PARADA\":\njson{\n  \"resposta\": \"Entendi! Quando vocês estão planejando retomar? Posso deixar esse orçamento guardado e quando estiver próximo da data a gente confirma os valores atualizados. Assim você garante o planejamento sem pressa!\",\n  \"proxima_etapa\": \"Agendar follow-up conforme cronograma do cliente\",\n  \"obs\": \"Obra parada - cliente em fase de planejamento\",\n  ...\n}\nSE CLIENTE DISSER \"VOU COMEÇAR SEMANA QUE VEM\":\njson{\n  \"resposta\": \"Perfeito! Semana que vem então. Para confirmar a entrega no timing certo, que dia específico o pedreiro vai precisar do material lá? A gente programa certinho para não atrasar sua obra!\",\n  \"proxima_etapa\": \"Confirmar data específica de entrega e fechar pedido\",\n  \"obs\": \"Cliente com prazo definido - obra em andamento\",\n  ...\n}\nSE CLIENTE DISSER \"TENHO MAIS LAJES\":\njson{\n  \"resposta\": \"Que bom! Quantas lajes são no total? Se você quiser, posso fazer um orçamento completo de tudo para você ter uma visão geral do investimento. Às vezes conseguimos uma condição melhor comprando tudo junto também!\",\n  \"proxima_etapa\": \"Levantar todas as necessidades para orçamento completo\",\n  \"obs\": \"Cliente com múltiplas necessidades - oportunidade de venda maior\",\n  ...\n}\nFRASES DE TRANSIÇÃO NATURAL:\nAPÓS ENTENDER A SITUAÇÃO:\n\n\"Baseado no que você me falou...\"\n\"Considerando o timing da sua obra...\"\n\"Pensando na sua situação...\"\n\"Para se adequar ao seu cronograma...\"\n\nPARA MANTER CONVERSA FLUINDO:\n\n\"Me conta uma coisa...\"\n\"Aproveitando que estamos falando...\"\n\"Uma pergunta rápida...\"\n\"Só para eu entender melhor...\"\n\n\n---\n\n\n## 🎯 FLUXO PRINCIPAL\n\n### 1. RECEPÇÃO E ORÇAMENTO AUTOMÁTICO\n- Nome \"unknown\"? Pergunte: \"Pra te atender melhor, posso saber seu nome?\"\n- Cliente passou uma lista de produtos? **ORCE IMEDIATAMENTE**\n- Pergunte apenas mínimo necessário: \"Qual a metragem da sua laje?\"\n- **PRODUTO ESPECÍFICO**? → Orce SÓ o solicitado\n- **LAJE COMPLETA**? → Orce materiais completos\n\n### 2. CÁLCULO OBRIGATÓRIO - REGRA CRÍTICA\n**🚨 PROIBIDO RESPONDER SEM VALORES REAIS**\n\n**PROCESSO OBRIGATÓRIO:**\n1. **IDENTIFIQUE** o produto solicitado\n2. **EXECUTE** ferramenta correspondente ANTES de qualquer resposta\n3. **AGUARDE** retorno numérico da ferramenta\n4. **VERIFIQUE** se recebeu valores reais \n5. **SÓ ENTÃO** monte a resposta com valores\n\n**SE A FERRAMENTA NÃO RETORNAR VALOR NUMÉRICO:**\n- **TENTE NOVAMENTE** com parâmetros diferentes\n- **ATIVE SUPERVISOR**: `\"supervisor\": true`\n- **RESPONDA**: \"Estou consultando o preço atualizado e já retorno\"\n- **NUNCA** use placeholder ou invente valor\n\n**PLACEHOLDERS TOTALMENTE PROIBIDOS:**\n- ❌ \"[valor a ser calculado]\"\n- ❌ \"[preço]\" \n- ❌ \"R$ X,XX\"\n- ❌ \"valor a definir\"\n- ❌ Qualquer texto que não seja número real\n\n**ONLY USE REAL NUMBERS FROM TOOLS:**\n- ✅ R$ 234,00 (número real da ferramenta)\n- ✅ R$ 1.250,50 (valor calculado real)\n- ❌ R$ [valor] (placeholder proibido)\n\n## 🚨 REGRA CRÍTICA - ORÇAMENTO ESPECÍFICO VS COMPLETO\n\n### **IDENTIFICAR O QUE O CLIENTE QUER:**\n\n**🎯 PRODUTO ESPECÍFICO** (orçar SÓ o que pediu):\n- \"Quanto sai o isopor pra 8x4?\"\n- \"Preço só das treliças 6m\"  \n- \"Valor do arame queimado\"\n- \"Quanto custa a malha pop?\"\n\n**🏠 LAJE COMPLETA** (orçar tudo):\n- \"Material pra laje 8x4\"\n- \"Preciso fazer uma laje 6x5\"\n- \"Orçamento completo laje\"\n\n### **PROCESSO OBRIGATÓRIO:**\n\n1. **ANALISE a pergunta do cliente**\n2. **IDENTIFIQUE se é produto específico ou laje completa**\n3. **ORCE EXATAMENTE o que foi pedido**\n\n### **EXEMPLOS PRÁTICOS:**\n\n**❌ ERRADO:**\nCliente: \"Quanto o isopor pra 8x4?\"\nResposta: Orçamento completo com treliças + isopor + lajota\n\n**✅ CORRETO:**\nCliente: \"Quanto o isopor pra 8x4?\"\nResposta: Só o isopor para essa área\n\n**✅ CORRETO:**\nCliente: \"Material pra laje 8x4\"\nResposta: Orçamento completo\n\n## 🔄 REGRAS CRÍTICAS PARA MODIFICAÇÕES DE ORÇAMENTO\n\n### QUANDO CLIENTE PEDIR ALTERAÇÕES:\n**NUNCA** peça para esperar - **CALCULE IMEDIATAMENTE**\n\n**PROCESSO OBRIGATÓRIO:**\n1. **IDENTIFIQUE** o que cliente quer alterar\n2. **EXECUTE** ferramenta na hora com novos parâmetros  \n3. **APRESENTE** novo orçamento completo com valores reais\n4. **COMPARE** com anterior se necessário\n\n**EXEMPLOS DE ALTERAÇÕES:**\n- \"Quero com lajota ao invés de isopor\" → Orcamento(mesmas_medidas, \"lajota\")\n- \"Muda pra 15 treliças de 4m\" → Orcamento(materiais com a modificação pedida)\n- \"Adiciona 5kg de arame\" → Orcamento(materiais anterior + o novo material)\n\n**FRASES PROIBIDAS:**\n- ❌ \"Deixa eu calcular e já te mando\"\n- ❌ \"Aguarda que vou refazer\"\n- ❌ \"Vou recalcular pra você\"\n\n**FRASES CORRETAS:**\n- ✅ \"Perfeito! Recalculando com lajota:\" [APRESENTA ORÇAMENTO]\n- ✅ \"Alteração feita! Novo orçamento:\" [APRESENTA VALORES]\n- ✅ \"Com as mudanças fica assim:\" [APRESENTA ORÇAMENTO COMPLETO]\n\n## 📋 REGRAS CRÍTICAS PARA LISTAS MISTAS DE MATERIAIS\n\n### QUANDO CLIENTE ENVIAR LISTA COM PRODUTOS QUE NÃO TRABALHAMOS:\n\n**PROCESSO OBRIGATÓRIO EM 3 ETAPAS:**\n\n#### **ETAPA 1 - SEPARAÇÃO IMEDIATA:**\n- ✅ **Identifique produtos que VENDEMOS**\n- ❌ **Identifique produtos que NÃO VENDEMOS**\n\n#### **ETAPA 2 - ORÇAMENTO COMPLETO DOS DISPONÍVEIS:**\n- **CALCULE IMEDIATAMENTE** todos os produtos disponíveis\n- **USE AS FERRAMENTAS** para obter valores reais\n- **MONTE ORÇAMENTO FORMATADO** com preços\n\n## 📋 EXEMPLOS DE PRODUTO ESPECÍFICO VS LAJE COMPLETA\n\n### **🎯 PRODUTO ESPECÍFICO - ORÇAR SÓ O PEDIDO:**\n\n**Exemplo 1:**\n```json\n{\n  \"resposta\": \"**ORÇAMENTO**\\n\\n* **Isopor EPS para 8x4m (32m²):** R$ 280,00\\n\\n**Total: R$ 280,00**\\n\\nSó o isopor mesmo? Fechamos?\",\n  \"nome_cliente\": \"unknown\",\n  \"nome_identificado\": false,\n  \"intencao\": \"cotacao\",\n  \"proxima_etapa\": \"Confirmar se quer só isopor ou laje completa\",\n  \"obs\": \"Cliente pediu especificamente só isopor\",\n  \"supervisor\": false\n}\nExemplo 2:\njson{\n  \"resposta\": \"**ORÇAMENTO**\\n\\n* **10 Treliças 6,00m:** R$ 780,00\\n\\n**Total: R$ 780,00**\\n\\nSó as treliças? Precisa dos outros materiais também?\",\n  \"nome_cliente\": \"João\",\n  \"nome_identificado\": true,\n  \"intencao\": \"cotacao\",\n  \"proxima_etapa\": \"Verificar se quer orçamento completo da laje\",\n  \"obs\": \"Orçado apenas treliças conforme solicitado\",\n  \"supervisor\": false\n}\n\n#### **ETAPA 3 - INFORMAÇÃO SOBRE INDISPONÍVEIS:**\n- **INFORME** quais produtos não trabalhamos\n- **CONTINUE** focando nos produtos orçados\n- **CONDUZA** ao fechamento\n\n### EXEMPLO PRÁTICO DE LISTA MISTA:\n\n**CLIENTE ENVIA:**\n\"Preciso de: 10 treliças de 6m, 5 sacos de cimento, 20 lajotas cerâmicas, 3m³ de areia\"\n\n**PROCESSO:**\n1. **VENDEMOS**: 10 treliças 6m, 20 lajotas cerâmicas\n2. **NÃO VENDEMOS**: Cimento, areia\n3. **CALCULAR**: orcamento para treliças e lajotas\n4. **ORÇAR**: Valores completos dos disponíveis\n5. **INFORMAR**: Sobre cimento e areia\n\n**RESPOSTA MODELO:**\n```json\n{\n  \"resposta\": \"Dos materiais que você mencionou, trabalhamos com treliças e lajotas. Cimento e areia não fazem parte do nosso portfólio.\\n\\nSegue orçamento dos materiais disponíveis:\\n\\n**ORÇAMENTO MATERIAIS DISPONÍVEIS - Guardião Lajes**\\n* **10 Treliças 6,00m:** R$ 780,00\\n* **20 Lajotas Cerâmicas:** R$ 24,00\\n\\n**Total do Orçamento: R$ 804,00**\\n\\n Fechamos os materiais que temos disponíveis?\",\n  \"nome_cliente\": \"unknown\",\n  \"nome_identificado\": false,\n  \"intencao\": \"cotacao\",\n  \"proxima_etapa\": \"Aguardar confirmação do fechamento dos materiais disponíveis\",\n  \"obs\": \"Cliente solicitou lista mista - orçado treliças e lajotas, informado que não temos cimento e areia\",\n  \"supervisor\": false\n}\n```\n\n### REGRAS ESPECÍFICAS PARA LISTAS:\n\n**SEMPRE FAÇA:**\n- ✅ Processe IMEDIATAMENTE todos os produtos disponíveis\n- ✅ Calcule valores ANTES de montar resposta  \n- ✅ Apresente orçamento COMPLETO com valores reais\n- ✅ Seja específico sobre quais produtos não tem\n- ✅ Mantenha foco no fechamento dos disponíveis\n- ✅ Vergalhão/varão só é vendido com 12 metros\n- ✅ antes de usar as ferramentas converta para a unidade padrão\n- ✅ Se o cliente pediu um orçamento e depois procurou outro produto, pergunte se quer acrescentar no orçamento\n\n**NUNCA FAÇA:**\n- ❌ Só informar que não tem alguns produtos sem orçar os outros\n- ❌ Pedir pra esperar o orçamento dos disponíveis\n- ❌ Responder apenas \"trabalhamos com X, não trabalhamos com Y\"\n- ❌ Deixar de apresentar valores dos produtos disponíveis\n- ❌ Usar placeholders nos orçamentos\n- ❌ pergunta qual é o tamanho do vergalhao/varão\n\n### FRASES MODELO PARA LISTAS MISTAS:\n- \"Dos materiais listados, trabalhamos com [listar]. [Produtos indisponíveis] não temos. Segue orçamento:\"  \n- \"Da sua lista, temos disponível [produtos]. Para [indisponíveis] não trabalhamos. Orçamento:\"\n\n## 📋 FORMATO ORÇAMENTO - CRÍTICO\n\n**🚨 NUNCA ENVIE ORÇAMENTO COM PLACEHOLDER**\n\n**REGRA ABSOLUTA:**\n- **SE não tem valor da ferramenta = NÃO MONTE ORÇAMENTO**\n- **SE ferramenta falhou = TENTE NOVAMENTE e ATIVE SUPERVISOR**\n- **SE valor não é número = TENTE NOVAMENTE**\n\n**PROCESSO 100% OBRIGATÓRIO:**\n1. **EXECUTE** ferramenta específica (Orcamento, etc.)\n2. **VERIFIQUE** se retornou números reais (ex: 234.50, 1250.00)  \n3. **CONFIRME** que não há texto/placeholder no retorno\n4. **SÓ ENTÃO** monte orçamento com valores reais\n5. **SE falhou**: Supervisor + \"consultando preço atualizado\"\n\n**TESTE ANTES DE MONTAR ORÇAMENTO:**\n```\nSE retorno_ferramenta contém números reais:\n   ENTÃO monte orçamento\nSE retorno_ferramenta é texto/erro:\n   ENTÃO ative supervisor + \"consultando preço\"\n```\n\n**FORMATO EXATO (SÓ COM VALORES REAIS):**\n```\n**ORÇAMENTO**\n\n* **[Quantidade] [Item]:** R$ [NÚMERO_REAL_DA_FERRAMENTA]\n* **[Quantidade] [Item]:** R$ [NÚMERO_REAL_DA_FERRAMENTA]\n\n**Total do Orçamento: R$ [SOMA_DOS_NÚMEROS_REAIS]**\n\nPodemos fechar seu pedido ou ficou alguma dúvida?\n```\n\n**EXEMPLO REAL:**\n```\n**ORÇAMENTO**\n\n* **10 Treliças 6,00m:** R$ 780,00\n* **5kg Arame Queimado:** R$ 60,00\n\n**Total do Orçamento: R$ 840,00**\n```\n\n**❌ EXEMPLO PROIBIDO:**\n```\n**ORÇAMENTO**\n\n* **10 Treliças 6,00m:** R$ [valor a ser calculado]  ← NUNCA FAÇA\n* **5kg Arame Queimado:** R$ (preço)                ← PROIBIDO\n```\n\n**REGRAS CRÍTICAS:**\n- ❌ **ZERO TOLERÂNCIA** para placeholders\n- ❌ **NUNCA** monte orçamento sem números das ferramentas\n- ✅ **SEMPRE** teste se valor é número real antes de orçar\n- ✅ **SUPERVISOR** quando ferramenta não retornar valor\n- ✅ **TENTE NOVAMENTE** antes de desistir\n\n## 🎯 CAMPOS JSON - GUIA DETALHADO\n\n### Valores dos Campos:\n\n**intencao:** \"cotacao\" | \"consultoria\" | \"duvida\" | \"fechamento\" | \"outro\"\n\nproxima_etapa: Seja específico sobre descoberta\n\n\"Entender cronograma da obra para timing ideal\"\n\"Descobrir se tem outras lajes planejadas\"\n\"Aguardar definição de data para entrega\"\n\"Explorar necessidades adicionais da obra\"\n\"Confirmar situação financeira para parcelamento(com a taxa da maquineta)\"\n\n**obs:** Informações relevantes sobre a obra\n- Preferências do cliente\n- Produtos mencionados que não vendemos\n- Status da negociação\n- TIMING: \"Obra parada/andamento/urgente\"\n- ESCOPO: \"Única laje/múltiplas lajes/obra completa\"\n- EXPERIÊNCIA: \"Cliente experiente/iniciante\"\n- FINANCEIRO: \"Orçamento flexível/apertado\"\n- RELACIONAMENTO: \"Primeira compra/cliente recorrente\"\n\n**supervisor:** true | false\n- true: Prazos, entregas, produtos duvidosos\n- false: Consegue atender completamente\n\n## ❌ ERROS CRÍTICOS A EVITAR\n- ❌ Responder sem formato JSON\n- ❌ Adicionar texto fora do JSON\n- ❌ Usar placeholders em orçamentos\n- ❌ Orçar sem usar ferramentas\n- ❌ Enviar JSON inválido\n- ❌ Esquecer campos obrigatórios\n- ❌ **Pedir para cliente esperar quando alterar orçamento**\n- ❌ **Só informar produtos sem orçar em listas mistas**\n- ❌ **Responder \"vou calcular\" em modificações**\n- ❌ **Não apresentar valores em listas com produtos disponíveis**\n- ❌ **USAR QUALQUER PLACEHOLDER EM ORÇAMENTOS**\n- ❌ **MONTAR ORÇAMENTO SEM EXECUTAR FERRAMENTAS ANTES**\n- ❌ **ENVIAR ORÇAMENTO COM TEXTO AO INVÉS DE NÚMEROS**\n- ❌ **PROCURAR O TAMANHO DO VERGALHAO/VARAO**\n- ❌ **TENTAR OU VENDER O VERGALHAO/VARAO FRACIONADO**\n\n## ✅ SEMPRE FAÇA\n- ✅ Inicie resposta com JSON\n- ✅ Termine resposta com JSON\n- ✅ Use valores reais das ferramentas\n- ✅ Valide JSON antes de enviar\n- ✅ Inclua TODOS os campos obrigatórios\n- ✅ Ative supervisor quando necessário\n- ✅ **Calcule IMEDIATAMENTE em modificações de orçamento**\n- ✅ **Processe TODA lista e orce produtos disponíveis NA HORA**\n- ✅ **Apresente orçamento COMPLETO mesmo com produtos indisponíveis na lista**\n- ✅ **Execute ferramentas ANTES de responder sobre preços**\n- ✅ **TESTE SE FERRAMENTA RETORNOU NÚMERO REAL ANTES DE ORÇAR**\n- ✅ **ATIVE SUPERVISOR SE FERRAMENTA NÃO RETORNAR VALOR**\n- ✅ **SÓ MONTE ORÇAMENTO COM VALORES NUMÉRICOS REAIS**\n- ✅ **VENDER O VERGALHAO/VARAO INTEIRO**\n- ✅ **CONVERTE AS UNIDADES PARA MANDAR PARA FERRAMENTA**\n- ✅ **caso o cliente tenha feito um orçamento antes e procurou outro produto pergunte se quer acrescentar no orçamento anterior**\n\n## 🚨 LEMBRETE FINAL - REGRAS DE OURO\n**TODA RESPOSTA DEVE SER EXCLUSIVAMENTE NO FORMATO JSON ESPECIFICADO**\n**NÃO ADICIONE TEXTO ANTES, DEPOIS OU FORA DO JSON**\n**VALIDE O JSON ANTES DE ENVIAR**\n\n### 🔄 **MODIFICAÇÕES = CÁLCULO IMEDIATO**\n- Cliente pede alteração → Execute ferramenta → Apresente novo orçamento\n- NUNCA: \"vou calcular\" ou \"aguarda\"\n- SEMPRE: Valores na resposta\n\n### 📋 **LISTAS MISTAS = ORÇAMENTO + INFORMAÇÃO**\n- Separe produtos → Calcule disponíveis → Orce completo → Informe indisponíveis\n- NUNCA: Só informar sem orçar\n- SEMPRE: Orçamento dos produtos que tem\n\n---\n\n**RESPOSTA QUANDO FERRAMENTA FALHA:**\n```json\n{\n  \"resposta\": \"Estou consultando o preço atualizado desse material e já retorno com seu orçamento completo!\",\n  \"nome_cliente\": \"unknown\",\n  \"nome_identificado\": false,\n  \"intencao\": \"cotacao\", \n  \"proxima_etapa\": \"Aguardar supervisor para preços atualizados\",\n  \"obs\": \"Ferramenta não retornou valor - aguardando supervisor\",\n  \"supervisor\": true\n}\n```\n\n**RESPOSTA QUANDO TEM VALORES REAIS:**\n```json\n{\n  \"resposta\": \"Perfeito! Segue seu orçamento:\\n\\n**ORÇAMENTO**\\n\\n* **10 Treliças 6,00m:** R$ 780,00\\n* **5kg Arame Queimado:** R$ 60,00\\n\\n**Total do Orçamento: R$ 840,00**\\n\\nPodemos fechar seu pedido ou ficou alguma dúvida?\",\n  \"nome_cliente\": \"unknown\",\n  \"nome_identificado\": false,\n  \"intencao\": \"cotacao\",\n  \"proxima_etapa\": \"Aguardar confirmação do fechamento\",\n  \"obs\": \"Orçamento apresentado com valores reais das ferramentas\",\n  \"supervisor\": false\n}\n```\n\n## QUANDO CLIENTE SOLICITAR NOVO PRODUTO APÓS ORÇAMENTO ANTERIOR FAZER ORÇAMENTO E PROCURAR SE QUER ACRESCENTAR NO ORÇAMENTO ANTERIOR\n\nSEMPRE FAÇA:\n\n✅ Calcule o novo produto ANTES de perguntar sobre consolidação\n✅ Apresente preço do novo produto na mesma resposta da pergunta\n✅ Mencione valor do orçamento anterior para contextualizar\n✅ Ofereça consolidação de forma natural\n✅ Se confirmado, apresente orçamento completo atualizado\n\nNUNCA FAÇA:\n\n❌ Perguntar sobre consolidação sem mostrar preço do novo produto\n❌ Ignorar orçamento anterior quando cliente pede novo produto\n❌ Só responder preço sem oferecer consolidação\n❌ Esquecer de somar valores quando cliente confirmar"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        240,
        320
      ],
      "id": "25a1a0d3-ace5-4085-9db7-c047ad422e7c",
      "name": "SDR",
      "retryOnFail": true,
      "waitBetweenTries": 2500
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=chat{{ (() => {\n  try {\n    const node = $('Edit Fields6');\n    const id = node.item.json.norm?.contacinfo?.id;\n    return id ?? $json.whats;\n  } catch (_) {\n    return $json.whats;\n  }\n})() }}\n92345678912345671222",
        "sessionTTL": 180,
        "contextWindowLength": 7
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        280,
        580
      ],
      "id": "ed107ff6-ebd4-41eb-b9e9-4169f757e701",
      "name": "Redis Chat Memory SDR",
      "credentials": {
        "redis": {
          "id": "sA2U6PkBocrwko3a",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "name": "ultimos_orcamentos",
        "description": " Lista os últimos orçamentos realizados pelo lead.",
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $workflow.id }}"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "operation": "cons_orc",
            "tableName": "orcamentos",
            "leadid": "1"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "operation",
              "displayName": "operation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "tableName",
              "displayName": "tableName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "especificacoes",
              "displayName": "especificacoes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": true
            },
            {
              "id": "ferragem",
              "displayName": "ferragem",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": true
            },
            {
              "id": "detalhes",
              "displayName": "detalhes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": true
            },
            {
              "id": "NomeProduto",
              "displayName": "NomeProduto",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "leadid",
              "displayName": "leadid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "Produtos",
              "displayName": "Produtos",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "Obs",
              "displayName": "Obs",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "id": "9319e874-5437-4273-863d-f1d6ce00cb71",
      "name": "ultimos_orcamentos",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        420,
        600
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        520,
        560
      ],
      "id": "517e5fe4-a9a1-4c15-afa6-0e581a551339",
      "name": "Calculator"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        160,
        560
      ],
      "id": "9eff5c87-356f-4520-bfc6-7be5ac5c2b5b",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "3mNlZ20nDfXfgUl9",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "for (const item of items) {\n  const outputString = item.json.output;\n  let jsonString = outputString.replace(/```json\\n|```/g, '').trim();\n\n  // Tenta parsear a string JSON\n  try {\n    item.json = JSON.parse(jsonString);\n  } catch (e) {\n    // Em caso de erro, você pode logar, retornar um erro, ou lidar de outra forma\n    console.error(\"Erro ao parsear JSON:\", e, \"String original:\", jsonString);\n    // Opcional: Se quiser que o workflow falhe neste item\n    // throw new Error(\"Falha ao parsear JSON\");\n  }\n}\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        320
      ],
      "id": "cdb883c9-0739-42e6-9bd4-6b59e5dc362c",
      "name": "Code2"
    },
    {
      "parameters": {
        "description": "Busca documentos relevantes na base de conhecimento a partir da conversa do cliente.",
        "workflowId": {
          "__rl": true,
          "value": "=4pdizWewQzdsLsGx",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "operation": "rag",
            "Query": "={{ $fromAI('Query', `Gere uma consulta otimizada para RAG com base no que voce vai responder ao cliente`, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "operation",
              "displayName": "operation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "tableName",
              "displayName": "tableName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "especificacoes",
              "displayName": "especificacoes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": true
            },
            {
              "id": "ferragem",
              "displayName": "ferragem",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": true
            },
            {
              "id": "detalhes",
              "displayName": "detalhes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": true
            },
            {
              "id": "NomeProduto",
              "displayName": "NomeProduto",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "leadid",
              "displayName": "leadid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "Produtos",
              "displayName": "Produtos",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "Obs",
              "displayName": "Obs",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "Query",
              "displayName": "Query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        640,
        560
      ],
      "id": "3df9920c-2e47-4653-b31b-7a246cbefc95",
      "name": "RAG",
      "disabled": true
    },
    {
      "parameters": {
        "description": "Busca documentos relevantes na base de conhecimento a partir da conversa do cliente. \nsó manda o \"dimensoes_laje\" quando o cliente quiser calcular a laje por meio da medida(\"[lagura]x[comprimento]\" ou \"[area em m²]m²\".\nsó use informações que o cliente falou, nunca invente dados.\nMande com o maximo de detalhes os produtos\n***Caso não tenha uma responta satifatoria tente mais uma vez***",
        "workflowId": {
          "__rl": true,
          "value": "=Z7opcPwNBBX1666e",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "produtos": "=  {\n\"lista_produtos\": \"{{ JSON.stringify($fromAI('lista_produtos', 'Lista completa de produtos solicitados pelo cliente, só use quando o cliente mandou produtos isolados caso não tenha produtos isolados enviar \"\"', 'string', '')).slice(1,-1) }}\",\n  \"tipo_projeto\": \"{{ $fromAI('tipo_projeto', 'Tipo do projeto: laje_completa, produtos_isolados, ou misto', 'string', 'produtos_isolados') }}\",\n  \"dimensoes_laje\": \"{{ $fromAI('dimensoes_laje', 'Dimensões da laje no formato AxB (ex: 5x8), só manda algum valor caso seja nescessario', 'string', '') }}\"\n}",
            "whatsapp": "={{ $('Edit Fields6').item.json.norm.contacinfo.id }}",
            "instace": "={{ $('Edit Fields6').item.json.body.instance }}"
          },
          "matchingColumns": [
            "produtos"
          ],
          "schema": [
            {
              "id": "produtos",
              "displayName": "produtos",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "whatsapp",
              "displayName": "whatsapp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "instace",
              "displayName": "instace",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        760,
        560
      ],
      "id": "a4de747b-1bc8-4a36-ad4c-c01bcc9836ab",
      "name": "Orcamento"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1a92de67-5404-43ee-a6bc-72589e7625fe",
              "name": "menssage",
              "value": "={{ $('redis_bufferCons').item.json.menssage.map(value => JSON.parse(value).conteudo).join('/n') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -500,
        320
      ],
      "id": "b7104337-a12e-40f4-ac20-3a68f706634f",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "id",
              "field2": "body.data.key.id"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1740,
        320
      ],
      "id": "56349a96-4f4e-4d06-91ec-e46f0d36dc6b",
      "name": "Merge"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Você é um organizador de mensagens para envio via WhatsApp.\n\nReceberá um texto longo gerado por um atendente virtual de materiais de construção, com orientações, preços e explicações.\n\nSua tarefa é:\n\n1️⃣ Dividir o texto em blocos, garantindo que cada bloco termine em um ponto final ou quebra natural de frase para não quebrar o sentido.\n\n2️⃣ Retornar os blocos em JSONL estruturado neste formato:\n{  \"bloco\": \"Primeiro bloco de texto...\"}\n{  \"bloco\": \"Segundo bloco de texto...\"}\n{  \"bloco\": \"Terceiro bloco de texto...\"}\n\n3️⃣ Não adicione explicações, apenas retorne o JSONL solicitado.\n\n4️⃣ Se o texto original for curto, retorne apenas um bloco.\n\n5 sempre deixe a parte do orçamento em um bloco só\n\nTexto a dividir:\n{{ $json.resposta }}",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1100,
        320
      ],
      "id": "150d1523-0a4e-4716-98f4-31f6f54350a8",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1100,
        540
      ],
      "id": "8fbe49ad-3076-4595-9418-881abc63eb19",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "GOTIgGndJIkf9Pqy",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const outputItems = [];\n\n// Função para limpar texto de possíveis formatações markdown\nfunction cleanJsonText(text) {\n  // Remove blocos de código markdown (```json, ```jsonl, ou ``` ... ```)\n  let cleaned = text.replace(/```(?:json|jsonl)?\\s*\\n?([\\s\\S]*?)\\n?```/g, '$1');\n  \n  // Remove outras possíveis formatações\n  cleaned = cleaned.replace(/^\\s*```\\s*$/gm, ''); // Remove linhas com apenas ```\n  \n  return cleaned.trim();\n}\n\n// Função para validar se uma string é um JSON válido\nfunction isValidJson(str) {\n  try {\n    JSON.parse(str);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n// Função para tentar reparar JSON malformado\nfunction attemptJsonRepair(jsonStr) {\n  const repairs = [\n    // Estratégia 1: JSON original\n    () => jsonStr,\n    \n    // Estratégia 2: Escapar quebras de linha e aspas dentro de strings\n    () => {\n      return jsonStr.replace(/\"([^\"]*(?:\\\\.[^\"]*)*)\"/g, (match, content) => {\n        // Se é uma chave (seguida por :), não modifica\n        const afterMatch = jsonStr.slice(jsonStr.indexOf(match) + match.length).trim();\n        if (afterMatch.startsWith(':')) {\n          return match;\n        }\n        \n        // É um valor, escapa quebras de linha e aspas\n        const escaped = content\n          .replace(/\\\\/g, '\\\\\\\\')  // Escapa barras invertidas\n          .replace(/\"/g, '\\\\\"')    // Escapa aspas\n          .replace(/\\n/g, '\\\\n')   // Escapa quebras de linha\n          .replace(/\\r/g, '\\\\r')   // Escapa retorno de carro\n          .replace(/\\t/g, '\\\\t');  // Escapa tabs\n        \n        return `\"${escaped}\"`;\n      });\n    }\n  ];\n  \n  for (let i = 0; i < repairs.length; i++) {\n    try {\n      const repairedJson = repairs[i]();\n      const parsed = JSON.parse(repairedJson);\n      return { success: true, data: parsed, strategy: i + 1 };\n    } catch (error) {\n      continue;\n    }\n  }\n  \n  return { success: false };\n}\n\n// Função para extrair objetos JSON de um texto\nfunction extractJsonObjects(text) {\n  const objects = [];\n  let braceCount = 0;\n  let currentObject = '';\n  let inString = false;\n  let escapeNext = false;\n  \n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    \n    if (escapeNext) {\n      currentObject += char;\n      escapeNext = false;\n      continue;\n    }\n    \n    if (char === '\\\\' && inString) {\n      currentObject += char;\n      escapeNext = true;\n      continue;\n    }\n    \n    if (char === '\"' && !escapeNext) {\n      inString = !inString;\n      currentObject += char;\n      continue;\n    }\n    \n    if (!inString) {\n      if (char === '{') {\n        if (braceCount === 0) {\n          currentObject = char; // Inicia novo objeto\n        } else {\n          currentObject += char;\n        }\n        braceCount++;\n      } else if (char === '}') {\n        currentObject += char;\n        braceCount--;\n        \n        if (braceCount === 0) {\n          // Objeto completo encontrado\n          const trimmed = currentObject.trim();\n          if (trimmed) {\n            objects.push(trimmed);\n          }\n          currentObject = '';\n        }\n      } else if (braceCount > 0) {\n        currentObject += char;\n      }\n    } else {\n      currentObject += char;\n    }\n  }\n  \n  return objects;\n}\n\n// Função para processar objetos JSON extraídos\nfunction processJsonObjects(jsonObjects) {\n  const results = [];\n  \n  for (let i = 0; i < jsonObjects.length; i++) {\n    const jsonStr = jsonObjects[i];\n    \n    // Tenta parsing direto primeiro\n    if (isValidJson(jsonStr)) {\n      try {\n        const parsed = JSON.parse(jsonStr);\n        results.push({ json: parsed });\n        continue;\n      } catch (error) {\n        // Não deveria chegar aqui se isValidJson retornou true\n      }\n    }\n    \n    // Tenta reparar o JSON\n    const repairResult = attemptJsonRepair(jsonStr);\n    \n    if (repairResult.success) {\n      results.push({ \n        json: {\n          ...repairResult.data,\n          _metadata: {\n            repaired: true,\n            strategy: repairResult.strategy,\n            objectIndex: i + 1\n          }\n        }\n      });\n    } else {\n      console.error(`Erro ao processar objeto JSON ${i + 1}:`, jsonStr);\n      results.push({\n        json: {\n          error: \"Erro de parse JSON\",\n          originalObject: jsonStr,\n          objectIndex: i + 1,\n          errorMessage: \"Falha em todas as estratégias de reparo\"\n        }\n      });\n    }\n  }\n  \n  return results;\n}\n\n// Função principal\nfunction parseJsonlText(jsonlString) {\n  if (typeof jsonlString !== 'string' || jsonlString.trim() === '') {\n    console.warn(\"Entrada 'text' está vazia ou não é uma string válida.\");\n    return [];\n  }\n  \n  // Limpa possíveis formatações markdown\n  const cleanedString = cleanJsonText(jsonlString);\n  console.log(\"Texto limpo:\", cleanedString.substring(0, 200) + \"...\");\n  \n  // Extrai objetos JSON do texto\n  const jsonObjects = extractJsonObjects(cleanedString);\n  console.log(`${jsonObjects.length} objeto(s) JSON encontrado(s)`);\n  \n  if (jsonObjects.length === 0) {\n    console.warn(\"Nenhum objeto JSON encontrado no texto\");\n    return [];\n  }\n  \n  // Processa os objetos encontrados\n  const results = processJsonObjects(jsonObjects);\n  console.log(`${results.length} objeto(s) processado(s) com sucesso`);\n  \n  return results;\n}\n\n// Código principal\ntry {\n  // Acessa a string do primeiro item de entrada\n  const jsonlString = items[0]?.json?.text;\n  \n  if (!jsonlString) {\n    console.warn(\"Nenhum texto encontrado no campo 'text' do primeiro item.\");\n    return [{ json: { error: \"Campo 'text' não encontrado ou vazio\" } }];\n  }\n  \n  console.log(\"Input recebido, processando...\");\n  \n  // Processa o texto\n  const results = parseJsonlText(jsonlString);\n  \n  if (results.length === 0) {\n    console.warn(\"Nenhum item válido foi processado.\");\n    return [{ json: { warning: \"Nenhum JSON válido encontrado no texto\" } }];\n  }\n  \n  console.log(`Processamento concluído: ${results.length} item(s) extraído(s)`);\n  outputItems.push(...results);\n  \n} catch (error) {\n  console.error(\"Erro geral no processamento:\", error);\n  outputItems.push({\n    json: {\n      error: \"Erro geral no processamento\",\n      details: error.message,\n      stack: error.stack\n    }\n  });\n}\n\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1460,
        320
      ],
      "id": "2de02bad-4a89-4294-837a-2347b896660b",
      "name": "Code"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1680,
        320
      ],
      "id": "0fa17971-bad4-46ca-a94f-bfc8e5ea488f",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        2200,
        400
      ],
      "id": "3445fabb-6b19-4bc5-8428-e3aedc090b3f"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ (() => {\n  try {\n    const id1 = $('Edit Fields6').item.json.body?.instance;\n    if (id1) return id1;\n  } catch (_) {}\n  try {\n    const id2 = $('orçamento/supervisor').item.json.instance;\n    if (id2) return id2;\n  } catch (_) {}\n  return null;\n})() }}",
        "remoteJid": "={{ (() => {\n  try {\n    const node = $('Edit Fields6');\n    const id = node.item.json.norm?.contacinfo?.id;\n    return id ?? $('orçamento/supervisor').item.json.whats;\n  } catch (_) {\n    return $('orçamento/supervisor').item.json.whats;\n  }\n})() }}",
        "messageText": "={{ $json.bloco }}",
        "options_message": {
          "delay": "={{Math.floor(Math.random() * (20000 - 10000 + 1)) + 10000}}"
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        1960,
        360
      ],
      "id": "71eb5906-0879-4038-9eba-6c5b52b40355",
      "name": "Enviar texto",
      "credentials": {
        "evolutionApi": {
          "id": "R2j8KIOLhEjdWQUa",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b3627b5b-efbf-415e-9842-f33dd618eb17",
              "leftValue": "={{ $json.supervisor }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        820,
        120
      ],
      "id": "b438c712-6ae3-4a70-a2d4-ae512f1cb06b",
      "name": "Filter"
    },
    {
      "parameters": {
        "chatId": "7020998195",
        "text": "=cliente:{{ $('Filter').item.json.nome_cliente }}\nnumero:{{ (() => {\n  try {\n    const node = $('Edit Fields6');\n    const id = node.item.json.norm?.contacinfo?.id;\n    return id ?? $('orçamento/supervisor').item.json.whats;\n  } catch (_) {\n    return $('orçamento/supervisor').item.json.whats;\n  }\n})() }}\n\n\n{{ $json.consolidatedText }}",
        "replyMarkup": "inlineKeyboard",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1200,
        120
      ],
      "id": "83a81e66-bafc-403e-bc2f-7591c0f2993b",
      "name": "Send a text message",
      "webhookId": "c06d1390-9891-4778-87c0-f9527c69a5a5",
      "credentials": {
        "telegramApi": {
          "id": "odpU20VI6Al1aS9m",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const outputItems = [];\nconst consolidatedStrings = [];\n\n// Itera sobre CADA item que chega como input neste nó Code (cada um sendo um objeto JSON)\nfor (const item of items) {\n  const data = item.json; // Acessa o objeto JSON de cada item\n\n  let itemStringParts = []; // Array temporário para construir a string de cada item\n\n  // Itera sobre TODAS as chaves (propriedades) do objeto 'data'\n  for (const key in data) {\n    if (Object.prototype.hasOwnProperty.call(data, key)) { // Garante que é uma propriedade própria do objeto\n      const value = data[key];\n\n      // Adiciona a chave e o valor à string, formatando como \"Chave: Valor\"\n      // Você pode ajustar a formatação aqui (ex: sem a chave, ou só o valor, etc.)\n      itemStringParts.push(`${key}: ${value}`);\n    }\n  }\n  \n  // Junta todas as partes formatadas de um único item com quebra de linha\n  // e adiciona ao array de strings consolidadas\n  if (itemStringParts.length > 0) {\n    consolidatedStrings.push(itemStringParts.join('\\n'));\n  }\n}\n\n// Junta todas as strings de itens consolidados com duas quebras de linha para separar os blocos de informação\nconst finalOutputString = consolidatedStrings.join('\\n\\n'); \n\n// Retorna um único item com a string organizada e consolidada\noutputItems.push({\n  json: {\n    consolidatedText: finalOutputString\n  }\n});\n\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        120
      ],
      "id": "bb21e30d-bbc9-4e51-991a-6bed23260f16",
      "name": "Code1"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "orçamento"
            },
            {
              "name": "whats"
            },
            {
              "name": "instance"
            },
            {
              "name": "Supervisor"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -60,
        560
      ],
      "id": "cc7e3e80-9c96-4c05-9974-1f447dc6c385",
      "name": "orçamento/supervisor"
    },
    {
      "parameters": {
        "operation": "push",
        "list": "telegram1",
        "messageData": "=\"message_id\": {{ $json.result.message_id }},\n\"whatsapp\": \"{{ (() => {\n  try {\n    const node = $('Edit Fields6');\n    const id = node.item.json.norm?.contacinfo?.id;\n    return id ?? $('orçamento/supervisor').item.json.whats;\n  } catch (_) {\n    return $('orçamento/supervisor').item.json.whats;\n  }\n})() }}\",\n\"instace\": \"{{ (() => {\n  try {\n    const id1 = $('Edit Fields6').item.json.body?.instance;\n    if (id1) return id1;\n  } catch (_) {}\n  try {\n    const id2 = $('orçamento/supervisor').item.json.instance;\n    if (id2) return id2;\n  } catch (_) {}\n  return null;\n})() }}\""
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1460,
        120
      ],
      "id": "3619285d-12b5-4447-98f3-b55a0d6ef332",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "sA2U6PkBocrwko3a",
          "name": "Redis account"
        }
      }
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consultar PGVector": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Gerar_Embedding_Cohere": {
      "main": [
        [
          {
            "node": "Consultar PGVector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Salvar Novo Embedding2": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres1": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        []
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields6": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consulta_CRM": {
      "main": [
        [
          {
            "node": "If_CRM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If_CRM": {
      "main": [
        [
          {
            "node": "new_atend2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "cadastro_CRM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cadastro_CRM": {
      "main": [
        [
          {
            "node": "new_atend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "new_atend2": {
      "main": [
        [
          {
            "node": "Consulta_new_atend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "new_atend": {
      "main": [
        [
          {
            "node": "Consulta_new_atend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consulta_new_atend": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Workflow_SDR",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow_Closer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Workflow_pos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "andamento_atendimento1": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Consulta_CRM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "redis_bufferCons",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "redis_bufferDel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "buffer": {
      "main": [
        [
          {
            "node": "redis_bufferInsert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "redis_bufferInsert": {
      "main": [
        [
          {
            "node": "redis_bufferCons",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "redis_bufferCons": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "redis_bufferDel": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SDR": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory SDR": {
      "ai_memory": [
        [
          {
            "node": "SDR",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "ultimos_orcamentos": {
      "ai_tool": [
        [
          {
            "node": "SDR",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "SDR",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "SDR",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "RAG": {
      "ai_tool": [
        [
          {
            "node": "SDR",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Orcamento": {
      "ai_tool": [
        [
          {
            "node": "SDR",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "produtos_mais_cotados": {
      "ai_tool": [
        [
          {
            "node": "SDR",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        []
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "buffer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Enviar texto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar texto": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "orçamento/supervisor": {
      "main": [
        [
          {
            "node": "SDR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {
    "orçamento/supervisor": [
      {
        "json": {
          "orçamento": null,
          "whats": "558281036911",
          "instance": "meu cell",
          "Supervisor": "origem: supervisor\nmensagem: pode ser na quarta-feira?"
        }
      }
    ]
  },
  "versionId": "1c40e42a-4fd0-490b-8d1e-1aab20c94dc4",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-07-10T20:19:24.664Z",
      "updatedAt": "2025-07-10T20:19:24.664Z",
      "id": "cYovOiLISxXgMtoe",
      "name": "vendas"
    },
    {
      "createdAt": "2025-07-10T20:19:24.702Z",
      "updatedAt": "2025-07-10T20:19:24.702Z",
      "id": "VRmSdtFbSN3BkiqH",
      "name": "GL"
    }
  ]
}